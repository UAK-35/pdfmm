/**
 * Copyright (C) 2010 by Dominik Seichter <domseichter@web.de>
 *
 * Licensed under GNU Library General Public License 2.0 or later.
 * Some rights reserved. See COPYING, AUTHORS.
 */

#include "PdfDefinesPrivate.h"
#include "PdfStandard14FontData.h"
#include <pdfmm/base/PdfFontMetricsStandard14.h>

using namespace std;
using namespace mm;

constexpr const char* FONT_TIMES_ROMAN_STD = "Times-Roman";
constexpr const char* FONT_TIMES_ITALIC_STD = "Times-Italic";
constexpr const char* FONT_TIMES_BOLD_STD = "Times-Bold";
constexpr const char* FONT_TIMES_BOLD_ITALIC_STD = "Times-BoldItalic";
constexpr const char* FONT_HELVETICA_STD = "Helvetica";
constexpr const char* FONT_HELVETICA_OBLIQUE_STD =  "Helvetica-Oblique";
constexpr const char* FONT_HELVETICA_BOLD_STD = "Helvetica-Bold";
constexpr const char* FONT_HELVETICA_BOLD_OBLIQUE_STD = "Helvetica-BoldOblique";
constexpr const char* FONT_COURIER_STD = "Courier";
constexpr const char* FONT_COURIER_OBLIQUE_STD = "Courier-Oblique";
constexpr const char* FONT_COURIER_BOLD_STD = "Courier-Bold";
constexpr const char* FONT_COURIER_BOLD_OBLIQUE_STD = "Courier-BoldOblique";
constexpr const char* FONT_SYMBOL_STD = "Symbol";
constexpr const char* FONT_ZAPF_DINGBATS_STD = "ZapfDingbats";

constexpr const char* FONT_TIMES_ROMAN_ALT = "TimesNewRoman";
constexpr const char* FONT_TIMES_ITALIC_ALT = "TimesNewRoman,Italic";
constexpr const char* FONT_TIMES_BOLD_ALT = "TimesNewRoman,Bold";
constexpr const char* FONT_TIMES_BOLD_ITALIC_ALT = "TimesNewRoman,BoldItalic";
constexpr const char* FONT_HELVETICA_ALT = "Arial";
constexpr const char* FONT_HELVETICA_OBLIQUE_ALT = "Arial,Italic";
constexpr const char* FONT_HELVETICA_BOLD_ALT = "Arial,Bold";
constexpr const char* FONT_HELVETICA_BOLD_OBLIQUE_ALT = "Arial,BoldItalic";
constexpr const char* FONT_COURIER_ALT = "CourierNew";
constexpr const char* FONT_COURIER_OBLIQUE_ALT = "CourierNew,Italic";
constexpr const char* FONT_COURIER_BOLD_ALT = "CourierNew,Bold";
constexpr const char* FONT_COURIER_BOLD_OBLIQUE_ALT = "CourierNew,BoldItalic";

constexpr const char* TIMES_ROMAN_FAMILY_STD = "Times";
constexpr const char* TIMES_HELVETICA_FAMILY_STD = "Helvetica";
constexpr const char* TIMES_COURIER_FAMILY_STD = "Courier";

enum class PdfStandard14FontFamily
{
    Unknown = 0,
    Times,
    Helvetica,
    Courier,
    Symbol,
    ZapfDingbats,
};

struct Std14CPToGIDMapImp
{
    Std14CPToGIDMapImp(PdfStandard14FontType stdFont);
    std::unordered_map<unsigned short, unsigned short> Map;
};

// The following are the Standard 14 fonts data copied from libharu.
static const Standard14FontChar CHAR_DATA_COURIER[315] = {
    { 0x0020, 600 },
    { 0x0021, 600 },
    { 0x0022, 600 },
    { 0x0023, 600 },
    { 0x0024, 600 },
    { 0x0025, 600 },
    { 0x0026, 600 },
    { 0x2019, 600 },
    { 0x0028, 600 },
    { 0x0029, 600 },
    { 0x002A, 600 },
    { 0x002B, 600 },
    { 0x002C, 600 },
    { 0x002D, 600 },
    { 0x002E, 600 },
    { 0x002F, 600 },
    { 0x0030, 600 },
    { 0x0031, 600 },
    { 0x0032, 600 },
    { 0x0033, 600 },
    { 0x0034, 600 },
    { 0x0035, 600 },
    { 0x0036, 600 },
    { 0x0037, 600 },
    { 0x0038, 600 },
    { 0x0039, 600 },
    { 0x003A, 600 },
    { 0x003B, 600 },
    { 0x003C, 600 },
    { 0x003D, 600 },
    { 0x003E, 600 },
    { 0x003F, 600 },
    { 0x0040, 600 },
    { 0x0041, 600 },
    { 0x0042, 600 },
    { 0x0043, 600 },
    { 0x0044, 600 },
    { 0x0045, 600 },
    { 0x0046, 600 },
    { 0x0047, 600 },
    { 0x0048, 600 },
    { 0x0049, 600 },
    { 0x004A, 600 },
    { 0x004B, 600 },
    { 0x004C, 600 },
    { 0x004D, 600 },
    { 0x004E, 600 },
    { 0x004F, 600 },
    { 0x0050, 600 },
    { 0x0051, 600 },
    { 0x0052, 600 },
    { 0x0053, 600 },
    { 0x0054, 600 },
    { 0x0055, 600 },
    { 0x0056, 600 },
    { 0x0057, 600 },
    { 0x0058, 600 },
    { 0x0059, 600 },
    { 0x005A, 600 },
    { 0x005B, 600 },
    { 0x005C, 600 },
    { 0x005D, 600 },
    { 0x005E, 600 },
    { 0x005F, 600 },
    { 0x2018, 600 },
    { 0x0061, 600 },
    { 0x0062, 600 },
    { 0x0063, 600 },
    { 0x0064, 600 },
    { 0x0065, 600 },
    { 0x0066, 600 },
    { 0x0067, 600 },
    { 0x0068, 600 },
    { 0x0069, 600 },
    { 0x006A, 600 },
    { 0x006B, 600 },
    { 0x006C, 600 },
    { 0x006D, 600 },
    { 0x006E, 600 },
    { 0x006F, 600 },
    { 0x0070, 600 },
    { 0x0071, 600 },
    { 0x0072, 600 },
    { 0x0073, 600 },
    { 0x0074, 600 },
    { 0x0075, 600 },
    { 0x0076, 600 },
    { 0x0077, 600 },
    { 0x0078, 600 },
    { 0x0079, 600 },
    { 0x007A, 600 },
    { 0x007B, 600 },
    { 0x007C, 600 },
    { 0x007D, 600 },
    { 0x007E, 600 },
    { 0x00A1, 600 },
    { 0x00A2, 600 },
    { 0x00A3, 600 },
    { 0x2044, 600 },
    { 0x00A5, 600 },
    { 0x0192, 600 },
    { 0x00A7, 600 },
    { 0x00A4, 600 },
    { 0x0027, 600 },
    { 0x201C, 600 },
    { 0x00AB, 600 },
    { 0x2039, 600 },
    { 0x203A, 600 },
    { 0xFB01, 600 },
    { 0xFB02, 600 },
    { 0x2013, 600 },
    { 0x2020, 600 },
    { 0x2021, 600 },
    { 0x00B7, 600 },
    { 0x00B6, 600 },
    { 0x2022, 600 },
    { 0x201A, 600 },
    { 0x201E, 600 },
    { 0x201D, 600 },
    { 0x00BB, 600 },
    { 0x2026, 600 },
    { 0x2030, 600 },
    { 0x00BF, 600 },
    { 0x0060, 600 },
    { 0x00B4, 600 },
    { 0x02C6, 600 },
    { 0x02DC, 600 },
    { 0x00AF, 600 },
    { 0x02D8, 600 },
    { 0x02D9, 600 },
    { 0x00A8, 600 },
    { 0x02DA, 600 },
    { 0x00B8, 600 },
    { 0x02DD, 600 },
    { 0x02DB, 600 },
    { 0x02C7, 600 },
    { 0x2014, 600 },
    { 0x00C6, 600 },
    { 0x00AA, 600 },
    { 0x0141, 600 },
    { 0x00D8, 600 },
    { 0x0152, 600 },
    { 0x00BA, 600 },
    { 0x00E6, 600 },
    { 0x0131, 600 },
    { 0x0142, 600 },
    { 0x00F8, 600 },
    { 0x0153, 600 },
    { 0x00DF, 600 },
    { 0x00CF, 600 },
    { 0x00E9, 600 },
    { 0x0103, 600 },
    { 0x0171, 600 },
    { 0x011B, 600 },
    { 0x0178, 600 },
    { 0x00F7, 600 },
    { 0x00DD, 600 },
    { 0x00C2, 600 },
    { 0x00E1, 600 },
    { 0x00DB, 600 },
    { 0x00FD, 600 },
    { 0x0219, 600 },
    { 0x00EA, 600 },
    { 0x016E, 600 },
    { 0x00DC, 600 },
    { 0x0105, 600 },
    { 0x00DA, 600 },
    { 0x0173, 600 },
    { 0x00CB, 600 },
    { 0x0110, 600 },
    { 0xF6C3, 600 },
    { 0x00A9, 600 },
    { 0x0112, 600 },
    { 0x010D, 600 },
    { 0x00E5, 600 },
    { 0x0145, 600 },
    { 0x013A, 600 },
    { 0x00E0, 600 },
    { 0x0162, 600 },
    { 0x0106, 600 },
    { 0x00E3, 600 },
    { 0x0116, 600 },
    { 0x0161, 600 },
    { 0x015F, 600 },
    { 0x00ED, 600 },
    { 0x25CA, 600 },
    { 0x0158, 600 },
    { 0x0122, 600 },
    { 0x00FB, 600 },
    { 0x00E2, 600 },
    { 0x0100, 600 },
    { 0x0159, 600 },
    { 0x00E7, 600 },
    { 0x017B, 600 },
    { 0x00DE, 600 },
    { 0x014C, 600 },
    { 0x0154, 600 },
    { 0x015A, 600 },
    { 0x010F, 600 },
    { 0x016A, 600 },
    { 0x016F, 600 },
    { 0x00B3, 600 },
    { 0x00D2, 600 },
    { 0x00C0, 600 },
    { 0x0102, 600 },
    { 0x00D7, 600 },
    { 0x00FA, 600 },
    { 0x0164, 600 },
    { 0x2202, 600 },
    { 0x00FF, 600 },
    { 0x0143, 600 },
    { 0x00EE, 600 },
    { 0x00CA, 600 },
    { 0x00E4, 600 },
    { 0x00EB, 600 },
    { 0x0107, 600 },
    { 0x0144, 600 },
    { 0x016B, 600 },
    { 0x0147, 600 },
    { 0x00CD, 600 },
    { 0x00B1, 600 },
    { 0x00A6, 600 },
    { 0x00AE, 600 },
    { 0x011E, 600 },
    { 0x0130, 600 },
    { 0x2211, 600 },
    { 0x00C8, 600 },
    { 0x0155, 600 },
    { 0x014D, 600 },
    { 0x0179, 600 },
    { 0x017D, 600 },
    { 0x2265, 600 },
    { 0x00D0, 600 },
    { 0x00C7, 600 },
    { 0x013C, 600 },
    { 0x0165, 600 },
    { 0x0119, 600 },
    { 0x0172, 600 },
    { 0x00C1, 600 },
    { 0x00C4, 600 },
    { 0x00E8, 600 },
    { 0x017A, 600 },
    { 0x012F, 600 },
    { 0x00D3, 600 },
    { 0x00F3, 600 },
    { 0x0101, 600 },
    { 0x015B, 600 },
    { 0x00EF, 600 },
    { 0x00D4, 600 },
    { 0x00D9, 600 },
    { 0x0394, 600 },
    { 0x00FE, 600 },
    { 0x00B2, 600 },
    { 0x00D6, 600 },
    { 0x00B5, 600 },
    { 0x00EC, 600 },
    { 0x0151, 600 },
    { 0x0118, 600 },
    { 0x0111, 600 },
    { 0x00BE, 600 },
    { 0x015E, 600 },
    { 0x013E, 600 },
    { 0x0136, 600 },
    { 0x0139, 600 },
    { 0x2122, 600 },
    { 0x0117, 600 },
    { 0x00CC, 600 },
    { 0x012A, 600 },
    { 0x013D, 600 },
    { 0x00BD, 600 },
    { 0x2264, 600 },
    { 0x00F4, 600 },
    { 0x00F1, 600 },
    { 0x0170, 600 },
    { 0x00C9, 600 },
    { 0x0113, 600 },
    { 0x011F, 600 },
    { 0x00BC, 600 },
    { 0x0160, 600 },
    { 0x0218, 600 },
    { 0x0150, 600 },
    { 0x00B0, 600 },
    { 0x00F2, 600 },
    { 0x010C, 600 },
    { 0x00F9, 600 },
    { 0x221A, 600 },
    { 0x010E, 600 },
    { 0x0157, 600 },
    { 0x00D1, 600 },
    { 0x00F5, 600 },
    { 0x0156, 600 },
    { 0x013B, 600 },
    { 0x00C3, 600 },
    { 0x0104, 600 },
    { 0x00C5, 600 },
    { 0x00D5, 600 },
    { 0x017C, 600 },
    { 0x011A, 600 },
    { 0x012E, 600 },
    { 0x0137, 600 },
    { 0x2212, 600 },
    { 0x00CE, 600 },
    { 0x0148, 600 },
    { 0x0163, 600 },
    { 0x00AC, 600 },
    { 0x00F6, 600 },
    { 0x00FC, 600 },
    { 0x2260, 600 },
    { 0x0123, 600 },
    { 0x00F0, 600 },
    { 0x017E, 600 },
    { 0x0146, 600 },
    { 0x00B9, 600 },
    { 0x012B, 600 },
    { 0x20AC, 600 },
};

static const Standard14FontChar CHAR_DATA_COURIER_BOLD[315] = {
    { 0x0020, 600 },
    { 0x0021, 600 },
    { 0x0022, 600 },
    { 0x0023, 600 },
    { 0x0024, 600 },
    { 0x0025, 600 },
    { 0x0026, 600 },
    { 0x2019, 600 },
    { 0x0028, 600 },
    { 0x0029, 600 },
    { 0x002A, 600 },
    { 0x002B, 600 },
    { 0x002C, 600 },
    { 0x002D, 600 },
    { 0x002E, 600 },
    { 0x002F, 600 },
    { 0x0030, 600 },
    { 0x0031, 600 },
    { 0x0032, 600 },
    { 0x0033, 600 },
    { 0x0034, 600 },
    { 0x0035, 600 },
    { 0x0036, 600 },
    { 0x0037, 600 },
    { 0x0038, 600 },
    { 0x0039, 600 },
    { 0x003A, 600 },
    { 0x003B, 600 },
    { 0x003C, 600 },
    { 0x003D, 600 },
    { 0x003E, 600 },
    { 0x003F, 600 },
    { 0x0040, 600 },
    { 0x0041, 600 },
    { 0x0042, 600 },
    { 0x0043, 600 },
    { 0x0044, 600 },
    { 0x0045, 600 },
    { 0x0046, 600 },
    { 0x0047, 600 },
    { 0x0048, 600 },
    { 0x0049, 600 },
    { 0x004A, 600 },
    { 0x004B, 600 },
    { 0x004C, 600 },
    { 0x004D, 600 },
    { 0x004E, 600 },
    { 0x004F, 600 },
    { 0x0050, 600 },
    { 0x0051, 600 },
    { 0x0052, 600 },
    { 0x0053, 600 },
    { 0x0054, 600 },
    { 0x0055, 600 },
    { 0x0056, 600 },
    { 0x0057, 600 },
    { 0x0058, 600 },
    { 0x0059, 600 },
    { 0x005A, 600 },
    { 0x005B, 600 },
    { 0x005C, 600 },
    { 0x005D, 600 },
    { 0x005E, 600 },
    { 0x005F, 600 },
    { 0x2018, 600 },
    { 0x0061, 600 },
    { 0x0062, 600 },
    { 0x0063, 600 },
    { 0x0064, 600 },
    { 0x0065, 600 },
    { 0x0066, 600 },
    { 0x0067, 600 },
    { 0x0068, 600 },
    { 0x0069, 600 },
    { 0x006A, 600 },
    { 0x006B, 600 },
    { 0x006C, 600 },
    { 0x006D, 600 },
    { 0x006E, 600 },
    { 0x006F, 600 },
    { 0x0070, 600 },
    { 0x0071, 600 },
    { 0x0072, 600 },
    { 0x0073, 600 },
    { 0x0074, 600 },
    { 0x0075, 600 },
    { 0x0076, 600 },
    { 0x0077, 600 },
    { 0x0078, 600 },
    { 0x0079, 600 },
    { 0x007A, 600 },
    { 0x007B, 600 },
    { 0x007C, 600 },
    { 0x007D, 600 },
    { 0x007E, 600 },
    { 0x00A1, 600 },
    { 0x00A2, 600 },
    { 0x00A3, 600 },
    { 0x2044, 600 },
    { 0x00A5, 600 },
    { 0x0192, 600 },
    { 0x00A7, 600 },
    { 0x00A4, 600 },
    { 0x0027, 600 },
    { 0x201C, 600 },
    { 0x00AB, 600 },
    { 0x2039, 600 },
    { 0x203A, 600 },
    { 0xFB01, 600 },
    { 0xFB02, 600 },
    { 0x2013, 600 },
    { 0x2020, 600 },
    { 0x2021, 600 },
    { 0x00B7, 600 },
    { 0x00B6, 600 },
    { 0x2022, 600 },
    { 0x201A, 600 },
    { 0x201E, 600 },
    { 0x201D, 600 },
    { 0x00BB, 600 },
    { 0x2026, 600 },
    { 0x2030, 600 },
    { 0x00BF, 600 },
    { 0x0060, 600 },
    { 0x00B4, 600 },
    { 0x02C6, 600 },
    { 0x02DC, 600 },
    { 0x00AF, 600 },
    { 0x02D8, 600 },
    { 0x02D9, 600 },
    { 0x00A8, 600 },
    { 0x02DA, 600 },
    { 0x00B8, 600 },
    { 0x02DD, 600 },
    { 0x02DB, 600 },
    { 0x02C7, 600 },
    { 0x2014, 600 },
    { 0x00C6, 600 },
    { 0x00AA, 600 },
    { 0x0141, 600 },
    { 0x00D8, 600 },
    { 0x0152, 600 },
    { 0x00BA, 600 },
    { 0x00E6, 600 },
    { 0x0131, 600 },
    { 0x0142, 600 },
    { 0x00F8, 600 },
    { 0x0153, 600 },
    { 0x00DF, 600 },
    { 0x00CF, 600 },
    { 0x00E9, 600 },
    { 0x0103, 600 },
    { 0x0171, 600 },
    { 0x011B, 600 },
    { 0x0178, 600 },
    { 0x00F7, 600 },
    { 0x00DD, 600 },
    { 0x00C2, 600 },
    { 0x00E1, 600 },
    { 0x00DB, 600 },
    { 0x00FD, 600 },
    { 0x0219, 600 },
    { 0x00EA, 600 },
    { 0x016E, 600 },
    { 0x00DC, 600 },
    { 0x0105, 600 },
    { 0x00DA, 600 },
    { 0x0173, 600 },
    { 0x00CB, 600 },
    { 0x0110, 600 },
    { 0xF6C3, 600 },
    { 0x00A9, 600 },
    { 0x0112, 600 },
    { 0x010D, 600 },
    { 0x00E5, 600 },
    { 0x0145, 600 },
    { 0x013A, 600 },
    { 0x00E0, 600 },
    { 0x0162, 600 },
    { 0x0106, 600 },
    { 0x00E3, 600 },
    { 0x0116, 600 },
    { 0x0161, 600 },
    { 0x015F, 600 },
    { 0x00ED, 600 },
    { 0x25CA, 600 },
    { 0x0158, 600 },
    { 0x0122, 600 },
    { 0x00FB, 600 },
    { 0x00E2, 600 },
    { 0x0100, 600 },
    { 0x0159, 600 },
    { 0x00E7, 600 },
    { 0x017B, 600 },
    { 0x00DE, 600 },
    { 0x014C, 600 },
    { 0x0154, 600 },
    { 0x015A, 600 },
    { 0x010F, 600 },
    { 0x016A, 600 },
    { 0x016F, 600 },
    { 0x00B3, 600 },
    { 0x00D2, 600 },
    { 0x00C0, 600 },
    { 0x0102, 600 },
    { 0x00D7, 600 },
    { 0x00FA, 600 },
    { 0x0164, 600 },
    { 0x2202, 600 },
    { 0x00FF, 600 },
    { 0x0143, 600 },
    { 0x00EE, 600 },
    { 0x00CA, 600 },
    { 0x00E4, 600 },
    { 0x00EB, 600 },
    { 0x0107, 600 },
    { 0x0144, 600 },
    { 0x016B, 600 },
    { 0x0147, 600 },
    { 0x00CD, 600 },
    { 0x00B1, 600 },
    { 0x00A6, 600 },
    { 0x00AE, 600 },
    { 0x011E, 600 },
    { 0x0130, 600 },
    { 0x2211, 600 },
    { 0x00C8, 600 },
    { 0x0155, 600 },
    { 0x014D, 600 },
    { 0x0179, 600 },
    { 0x017D, 600 },
    { 0x2265, 600 },
    { 0x00D0, 600 },
    { 0x00C7, 600 },
    { 0x013C, 600 },
    { 0x0165, 600 },
    { 0x0119, 600 },
    { 0x0172, 600 },
    { 0x00C1, 600 },
    { 0x00C4, 600 },
    { 0x00E8, 600 },
    { 0x017A, 600 },
    { 0x012F, 600 },
    { 0x00D3, 600 },
    { 0x00F3, 600 },
    { 0x0101, 600 },
    { 0x015B, 600 },
    { 0x00EF, 600 },
    { 0x00D4, 600 },
    { 0x00D9, 600 },
    { 0x0394, 600 },
    { 0x00FE, 600 },
    { 0x00B2, 600 },
    { 0x00D6, 600 },
    { 0x00B5, 600 },
    { 0x00EC, 600 },
    { 0x0151, 600 },
    { 0x0118, 600 },
    { 0x0111, 600 },
    { 0x00BE, 600 },
    { 0x015E, 600 },
    { 0x013E, 600 },
    { 0x0136, 600 },
    { 0x0139, 600 },
    { 0x2122, 600 },
    { 0x0117, 600 },
    { 0x00CC, 600 },
    { 0x012A, 600 },
    { 0x013D, 600 },
    { 0x00BD, 600 },
    { 0x2264, 600 },
    { 0x00F4, 600 },
    { 0x00F1, 600 },
    { 0x0170, 600 },
    { 0x00C9, 600 },
    { 0x0113, 600 },
    { 0x011F, 600 },
    { 0x00BC, 600 },
    { 0x0160, 600 },
    { 0x0218, 600 },
    { 0x0150, 600 },
    { 0x00B0, 600 },
    { 0x00F2, 600 },
    { 0x010C, 600 },
    { 0x00F9, 600 },
    { 0x221A, 600 },
    { 0x010E, 600 },
    { 0x0157, 600 },
    { 0x00D1, 600 },
    { 0x00F5, 600 },
    { 0x0156, 600 },
    { 0x013B, 600 },
    { 0x00C3, 600 },
    { 0x0104, 600 },
    { 0x00C5, 600 },
    { 0x00D5, 600 },
    { 0x017C, 600 },
    { 0x011A, 600 },
    { 0x012E, 600 },
    { 0x0137, 600 },
    { 0x2212, 600 },
    { 0x00CE, 600 },
    { 0x0148, 600 },
    { 0x0163, 600 },
    { 0x00AC, 600 },
    { 0x00F6, 600 },
    { 0x00FC, 600 },
    { 0x2260, 600 },
    { 0x0123, 600 },
    { 0x00F0, 600 },
    { 0x017E, 600 },
    { 0x0146, 600 },
    { 0x00B9, 600 },
    { 0x012B, 600 },
    { 0x20AC, 600 },
};

static const Standard14FontChar CHAR_DATA_COURIER_BOLD_OBLIQUE[315] = {
    { 0x0020, 600 },
    { 0x0021, 600 },
    { 0x0022, 600 },
    { 0x0023, 600 },
    { 0x0024, 600 },
    { 0x0025, 600 },
    { 0x0026, 600 },
    { 0x2019, 600 },
    { 0x0028, 600 },
    { 0x0029, 600 },
    { 0x002A, 600 },
    { 0x002B, 600 },
    { 0x002C, 600 },
    { 0x002D, 600 },
    { 0x002E, 600 },
    { 0x002F, 600 },
    { 0x0030, 600 },
    { 0x0031, 600 },
    { 0x0032, 600 },
    { 0x0033, 600 },
    { 0x0034, 600 },
    { 0x0035, 600 },
    { 0x0036, 600 },
    { 0x0037, 600 },
    { 0x0038, 600 },
    { 0x0039, 600 },
    { 0x003A, 600 },
    { 0x003B, 600 },
    { 0x003C, 600 },
    { 0x003D, 600 },
    { 0x003E, 600 },
    { 0x003F, 600 },
    { 0x0040, 600 },
    { 0x0041, 600 },
    { 0x0042, 600 },
    { 0x0043, 600 },
    { 0x0044, 600 },
    { 0x0045, 600 },
    { 0x0046, 600 },
    { 0x0047, 600 },
    { 0x0048, 600 },
    { 0x0049, 600 },
    { 0x004A, 600 },
    { 0x004B, 600 },
    { 0x004C, 600 },
    { 0x004D, 600 },
    { 0x004E, 600 },
    { 0x004F, 600 },
    { 0x0050, 600 },
    { 0x0051, 600 },
    { 0x0052, 600 },
    { 0x0053, 600 },
    { 0x0054, 600 },
    { 0x0055, 600 },
    { 0x0056, 600 },
    { 0x0057, 600 },
    { 0x0058, 600 },
    { 0x0059, 600 },
    { 0x005A, 600 },
    { 0x005B, 600 },
    { 0x005C, 600 },
    { 0x005D, 600 },
    { 0x005E, 600 },
    { 0x005F, 600 },
    { 0x2018, 600 },
    { 0x0061, 600 },
    { 0x0062, 600 },
    { 0x0063, 600 },
    { 0x0064, 600 },
    { 0x0065, 600 },
    { 0x0066, 600 },
    { 0x0067, 600 },
    { 0x0068, 600 },
    { 0x0069, 600 },
    { 0x006A, 600 },
    { 0x006B, 600 },
    { 0x006C, 600 },
    { 0x006D, 600 },
    { 0x006E, 600 },
    { 0x006F, 600 },
    { 0x0070, 600 },
    { 0x0071, 600 },
    { 0x0072, 600 },
    { 0x0073, 600 },
    { 0x0074, 600 },
    { 0x0075, 600 },
    { 0x0076, 600 },
    { 0x0077, 600 },
    { 0x0078, 600 },
    { 0x0079, 600 },
    { 0x007A, 600 },
    { 0x007B, 600 },
    { 0x007C, 600 },
    { 0x007D, 600 },
    { 0x007E, 600 },
    { 0x00A1, 600 },
    { 0x00A2, 600 },
    { 0x00A3, 600 },
    { 0x2044, 600 },
    { 0x00A5, 600 },
    { 0x0192, 600 },
    { 0x00A7, 600 },
    { 0x00A4, 600 },
    { 0x0027, 600 },
    { 0x201C, 600 },
    { 0x00AB, 600 },
    { 0x2039, 600 },
    { 0x203A, 600 },
    { 0xFB01, 600 },
    { 0xFB02, 600 },
    { 0x2013, 600 },
    { 0x2020, 600 },
    { 0x2021, 600 },
    { 0x00B7, 600 },
    { 0x00B6, 600 },
    { 0x2022, 600 },
    { 0x201A, 600 },
    { 0x201E, 600 },
    { 0x201D, 600 },
    { 0x00BB, 600 },
    { 0x2026, 600 },
    { 0x2030, 600 },
    { 0x00BF, 600 },
    { 0x0060, 600 },
    { 0x00B4, 600 },
    { 0x02C6, 600 },
    { 0x02DC, 600 },
    { 0x00AF, 600 },
    { 0x02D8, 600 },
    { 0x02D9, 600 },
    { 0x00A8, 600 },
    { 0x02DA, 600 },
    { 0x00B8, 600 },
    { 0x02DD, 600 },
    { 0x02DB, 600 },
    { 0x02C7, 600 },
    { 0x2014, 600 },
    { 0x00C6, 600 },
    { 0x00AA, 600 },
    { 0x0141, 600 },
    { 0x00D8, 600 },
    { 0x0152, 600 },
    { 0x00BA, 600 },
    { 0x00E6, 600 },
    { 0x0131, 600 },
    { 0x0142, 600 },
    { 0x00F8, 600 },
    { 0x0153, 600 },
    { 0x00DF, 600 },
    { 0x00CF, 600 },
    { 0x00E9, 600 },
    { 0x0103, 600 },
    { 0x0171, 600 },
    { 0x011B, 600 },
    { 0x0178, 600 },
    { 0x00F7, 600 },
    { 0x00DD, 600 },
    { 0x00C2, 600 },
    { 0x00E1, 600 },
    { 0x00DB, 600 },
    { 0x00FD, 600 },
    { 0x0219, 600 },
    { 0x00EA, 600 },
    { 0x016E, 600 },
    { 0x00DC, 600 },
    { 0x0105, 600 },
    { 0x00DA, 600 },
    { 0x0173, 600 },
    { 0x00CB, 600 },
    { 0x0110, 600 },
    { 0xF6C3, 600 },
    { 0x00A9, 600 },
    { 0x0112, 600 },
    { 0x010D, 600 },
    { 0x00E5, 600 },
    { 0x0145, 600 },
    { 0x013A, 600 },
    { 0x00E0, 600 },
    { 0x0162, 600 },
    { 0x0106, 600 },
    { 0x00E3, 600 },
    { 0x0116, 600 },
    { 0x0161, 600 },
    { 0x015F, 600 },
    { 0x00ED, 600 },
    { 0x25CA, 600 },
    { 0x0158, 600 },
    { 0x0122, 600 },
    { 0x00FB, 600 },
    { 0x00E2, 600 },
    { 0x0100, 600 },
    { 0x0159, 600 },
    { 0x00E7, 600 },
    { 0x017B, 600 },
    { 0x00DE, 600 },
    { 0x014C, 600 },
    { 0x0154, 600 },
    { 0x015A, 600 },
    { 0x010F, 600 },
    { 0x016A, 600 },
    { 0x016F, 600 },
    { 0x00B3, 600 },
    { 0x00D2, 600 },
    { 0x00C0, 600 },
    { 0x0102, 600 },
    { 0x00D7, 600 },
    { 0x00FA, 600 },
    { 0x0164, 600 },
    { 0x2202, 600 },
    { 0x00FF, 600 },
    { 0x0143, 600 },
    { 0x00EE, 600 },
    { 0x00CA, 600 },
    { 0x00E4, 600 },
    { 0x00EB, 600 },
    { 0x0107, 600 },
    { 0x0144, 600 },
    { 0x016B, 600 },
    { 0x0147, 600 },
    { 0x00CD, 600 },
    { 0x00B1, 600 },
    { 0x00A6, 600 },
    { 0x00AE, 600 },
    { 0x011E, 600 },
    { 0x0130, 600 },
    { 0x2211, 600 },
    { 0x00C8, 600 },
    { 0x0155, 600 },
    { 0x014D, 600 },
    { 0x0179, 600 },
    { 0x017D, 600 },
    { 0x2265, 600 },
    { 0x00D0, 600 },
    { 0x00C7, 600 },
    { 0x013C, 600 },
    { 0x0165, 600 },
    { 0x0119, 600 },
    { 0x0172, 600 },
    { 0x00C1, 600 },
    { 0x00C4, 600 },
    { 0x00E8, 600 },
    { 0x017A, 600 },
    { 0x012F, 600 },
    { 0x00D3, 600 },
    { 0x00F3, 600 },
    { 0x0101, 600 },
    { 0x015B, 600 },
    { 0x00EF, 600 },
    { 0x00D4, 600 },
    { 0x00D9, 600 },
    { 0x0394, 600 },
    { 0x00FE, 600 },
    { 0x00B2, 600 },
    { 0x00D6, 600 },
    { 0x00B5, 600 },
    { 0x00EC, 600 },
    { 0x0151, 600 },
    { 0x0118, 600 },
    { 0x0111, 600 },
    { 0x00BE, 600 },
    { 0x015E, 600 },
    { 0x013E, 600 },
    { 0x0136, 600 },
    { 0x0139, 600 },
    { 0x2122, 600 },
    { 0x0117, 600 },
    { 0x00CC, 600 },
    { 0x012A, 600 },
    { 0x013D, 600 },
    { 0x00BD, 600 },
    { 0x2264, 600 },
    { 0x00F4, 600 },
    { 0x00F1, 600 },
    { 0x0170, 600 },
    { 0x00C9, 600 },
    { 0x0113, 600 },
    { 0x011F, 600 },
    { 0x00BC, 600 },
    { 0x0160, 600 },
    { 0x0218, 600 },
    { 0x0150, 600 },
    { 0x00B0, 600 },
    { 0x00F2, 600 },
    { 0x010C, 600 },
    { 0x00F9, 600 },
    { 0x221A, 600 },
    { 0x010E, 600 },
    { 0x0157, 600 },
    { 0x00D1, 600 },
    { 0x00F5, 600 },
    { 0x0156, 600 },
    { 0x013B, 600 },
    { 0x00C3, 600 },
    { 0x0104, 600 },
    { 0x00C5, 600 },
    { 0x00D5, 600 },
    { 0x017C, 600 },
    { 0x011A, 600 },
    { 0x012E, 600 },
    { 0x0137, 600 },
    { 0x2212, 600 },
    { 0x00CE, 600 },
    { 0x0148, 600 },
    { 0x0163, 600 },
    { 0x00AC, 600 },
    { 0x00F6, 600 },
    { 0x00FC, 600 },
    { 0x2260, 600 },
    { 0x0123, 600 },
    { 0x00F0, 600 },
    { 0x017E, 600 },
    { 0x0146, 600 },
    { 0x00B9, 600 },
    { 0x012B, 600 },
    { 0x20AC, 600 },
};

static const Standard14FontChar CHAR_DATA_COURIER_OBLIQUE[315] = {
    { 0x0020, 600 },
    { 0x0021, 600 },
    { 0x0022, 600 },
    { 0x0023, 600 },
    { 0x0024, 600 },
    { 0x0025, 600 },
    { 0x0026, 600 },
    { 0x2019, 600 },
    { 0x0028, 600 },
    { 0x0029, 600 },
    { 0x002A, 600 },
    { 0x002B, 600 },
    { 0x002C, 600 },
    { 0x002D, 600 },
    { 0x002E, 600 },
    { 0x002F, 600 },
    { 0x0030, 600 },
    { 0x0031, 600 },
    { 0x0032, 600 },
    { 0x0033, 600 },
    { 0x0034, 600 },
    { 0x0035, 600 },
    { 0x0036, 600 },
    { 0x0037, 600 },
    { 0x0038, 600 },
    { 0x0039, 600 },
    { 0x003A, 600 },
    { 0x003B, 600 },
    { 0x003C, 600 },
    { 0x003D, 600 },
    { 0x003E, 600 },
    { 0x003F, 600 },
    { 0x0040, 600 },
    { 0x0041, 600 },
    { 0x0042, 600 },
    { 0x0043, 600 },
    { 0x0044, 600 },
    { 0x0045, 600 },
    { 0x0046, 600 },
    { 0x0047, 600 },
    { 0x0048, 600 },
    { 0x0049, 600 },
    { 0x004A, 600 },
    { 0x004B, 600 },
    { 0x004C, 600 },
    { 0x004D, 600 },
    { 0x004E, 600 },
    { 0x004F, 600 },
    { 0x0050, 600 },
    { 0x0051, 600 },
    { 0x0052, 600 },
    { 0x0053, 600 },
    { 0x0054, 600 },
    { 0x0055, 600 },
    { 0x0056, 600 },
    { 0x0057, 600 },
    { 0x0058, 600 },
    { 0x0059, 600 },
    { 0x005A, 600 },
    { 0x005B, 600 },
    { 0x005C, 600 },
    { 0x005D, 600 },
    { 0x005E, 600 },
    { 0x005F, 600 },
    { 0x2018, 600 },
    { 0x0061, 600 },
    { 0x0062, 600 },
    { 0x0063, 600 },
    { 0x0064, 600 },
    { 0x0065, 600 },
    { 0x0066, 600 },
    { 0x0067, 600 },
    { 0x0068, 600 },
    { 0x0069, 600 },
    { 0x006A, 600 },
    { 0x006B, 600 },
    { 0x006C, 600 },
    { 0x006D, 600 },
    { 0x006E, 600 },
    { 0x006F, 600 },
    { 0x0070, 600 },
    { 0x0071, 600 },
    { 0x0072, 600 },
    { 0x0073, 600 },
    { 0x0074, 600 },
    { 0x0075, 600 },
    { 0x0076, 600 },
    { 0x0077, 600 },
    { 0x0078, 600 },
    { 0x0079, 600 },
    { 0x007A, 600 },
    { 0x007B, 600 },
    { 0x007C, 600 },
    { 0x007D, 600 },
    { 0x007E, 600 },
    { 0x00A1, 600 },
    { 0x00A2, 600 },
    { 0x00A3, 600 },
    { 0x2044, 600 },
    { 0x00A5, 600 },
    { 0x0192, 600 },
    { 0x00A7, 600 },
    { 0x00A4, 600 },
    { 0x0027, 600 },
    { 0x201C, 600 },
    { 0x00AB, 600 },
    { 0x2039, 600 },
    { 0x203A, 600 },
    { 0xFB01, 600 },
    { 0xFB02, 600 },
    { 0x2013, 600 },
    { 0x2020, 600 },
    { 0x2021, 600 },
    { 0x00B7, 600 },
    { 0x00B6, 600 },
    { 0x2022, 600 },
    { 0x201A, 600 },
    { 0x201E, 600 },
    { 0x201D, 600 },
    { 0x00BB, 600 },
    { 0x2026, 600 },
    { 0x2030, 600 },
    { 0x00BF, 600 },
    { 0x0060, 600 },
    { 0x00B4, 600 },
    { 0x02C6, 600 },
    { 0x02DC, 600 },
    { 0x00AF, 600 },
    { 0x02D8, 600 },
    { 0x02D9, 600 },
    { 0x00A8, 600 },
    { 0x02DA, 600 },
    { 0x00B8, 600 },
    { 0x02DD, 600 },
    { 0x02DB, 600 },
    { 0x02C7, 600 },
    { 0x2014, 600 },
    { 0x00C6, 600 },
    { 0x00AA, 600 },
    { 0x0141, 600 },
    { 0x00D8, 600 },
    { 0x0152, 600 },
    { 0x00BA, 600 },
    { 0x00E6, 600 },
    { 0x0131, 600 },
    { 0x0142, 600 },
    { 0x00F8, 600 },
    { 0x0153, 600 },
    { 0x00DF, 600 },
    { 0x00CF, 600 },
    { 0x00E9, 600 },
    { 0x0103, 600 },
    { 0x0171, 600 },
    { 0x011B, 600 },
    { 0x0178, 600 },
    { 0x00F7, 600 },
    { 0x00DD, 600 },
    { 0x00C2, 600 },
    { 0x00E1, 600 },
    { 0x00DB, 600 },
    { 0x00FD, 600 },
    { 0x0219, 600 },
    { 0x00EA, 600 },
    { 0x016E, 600 },
    { 0x00DC, 600 },
    { 0x0105, 600 },
    { 0x00DA, 600 },
    { 0x0173, 600 },
    { 0x00CB, 600 },
    { 0x0110, 600 },
    { 0xF6C3, 600 },
    { 0x00A9, 600 },
    { 0x0112, 600 },
    { 0x010D, 600 },
    { 0x00E5, 600 },
    { 0x0145, 600 },
    { 0x013A, 600 },
    { 0x00E0, 600 },
    { 0x0162, 600 },
    { 0x0106, 600 },
    { 0x00E3, 600 },
    { 0x0116, 600 },
    { 0x0161, 600 },
    { 0x015F, 600 },
    { 0x00ED, 600 },
    { 0x25CA, 600 },
    { 0x0158, 600 },
    { 0x0122, 600 },
    { 0x00FB, 600 },
    { 0x00E2, 600 },
    { 0x0100, 600 },
    { 0x0159, 600 },
    { 0x00E7, 600 },
    { 0x017B, 600 },
    { 0x00DE, 600 },
    { 0x014C, 600 },
    { 0x0154, 600 },
    { 0x015A, 600 },
    { 0x010F, 600 },
    { 0x016A, 600 },
    { 0x016F, 600 },
    { 0x00B3, 600 },
    { 0x00D2, 600 },
    { 0x00C0, 600 },
    { 0x0102, 600 },
    { 0x00D7, 600 },
    { 0x00FA, 600 },
    { 0x0164, 600 },
    { 0x2202, 600 },
    { 0x00FF, 600 },
    { 0x0143, 600 },
    { 0x00EE, 600 },
    { 0x00CA, 600 },
    { 0x00E4, 600 },
    { 0x00EB, 600 },
    { 0x0107, 600 },
    { 0x0144, 600 },
    { 0x016B, 600 },
    { 0x0147, 600 },
    { 0x00CD, 600 },
    { 0x00B1, 600 },
    { 0x00A6, 600 },
    { 0x00AE, 600 },
    { 0x011E, 600 },
    { 0x0130, 600 },
    { 0x2211, 600 },
    { 0x00C8, 600 },
    { 0x0155, 600 },
    { 0x014D, 600 },
    { 0x0179, 600 },
    { 0x017D, 600 },
    { 0x2265, 600 },
    { 0x00D0, 600 },
    { 0x00C7, 600 },
    { 0x013C, 600 },
    { 0x0165, 600 },
    { 0x0119, 600 },
    { 0x0172, 600 },
    { 0x00C1, 600 },
    { 0x00C4, 600 },
    { 0x00E8, 600 },
    { 0x017A, 600 },
    { 0x012F, 600 },
    { 0x00D3, 600 },
    { 0x00F3, 600 },
    { 0x0101, 600 },
    { 0x015B, 600 },
    { 0x00EF, 600 },
    { 0x00D4, 600 },
    { 0x00D9, 600 },
    { 0x0394, 600 },
    { 0x00FE, 600 },
    { 0x00B2, 600 },
    { 0x00D6, 600 },
    { 0x00B5, 600 },
    { 0x00EC, 600 },
    { 0x0151, 600 },
    { 0x0118, 600 },
    { 0x0111, 600 },
    { 0x00BE, 600 },
    { 0x015E, 600 },
    { 0x013E, 600 },
    { 0x0136, 600 },
    { 0x0139, 600 },
    { 0x2122, 600 },
    { 0x0117, 600 },
    { 0x00CC, 600 },
    { 0x012A, 600 },
    { 0x013D, 600 },
    { 0x00BD, 600 },
    { 0x2264, 600 },
    { 0x00F4, 600 },
    { 0x00F1, 600 },
    { 0x0170, 600 },
    { 0x00C9, 600 },
    { 0x0113, 600 },
    { 0x011F, 600 },
    { 0x00BC, 600 },
    { 0x0160, 600 },
    { 0x0218, 600 },
    { 0x0150, 600 },
    { 0x00B0, 600 },
    { 0x00F2, 600 },
    { 0x010C, 600 },
    { 0x00F9, 600 },
    { 0x221A, 600 },
    { 0x010E, 600 },
    { 0x0157, 600 },
    { 0x00D1, 600 },
    { 0x00F5, 600 },
    { 0x0156, 600 },
    { 0x013B, 600 },
    { 0x00C3, 600 },
    { 0x0104, 600 },
    { 0x00C5, 600 },
    { 0x00D5, 600 },
    { 0x017C, 600 },
    { 0x011A, 600 },
    { 0x012E, 600 },
    { 0x0137, 600 },
    { 0x2212, 600 },
    { 0x00CE, 600 },
    { 0x0148, 600 },
    { 0x0163, 600 },
    { 0x00AC, 600 },
    { 0x00F6, 600 },
    { 0x00FC, 600 },
    { 0x2260, 600 },
    { 0x0123, 600 },
    { 0x00F0, 600 },
    { 0x017E, 600 },
    { 0x0146, 600 },
    { 0x00B9, 600 },
    { 0x012B, 600 },
    { 0x20AC, 600 },
};

static const Standard14FontChar CHAR_DATA_HELVETICA[315] = {
    { 0x0020, 278 },
    { 0x0021, 278 },
    { 0x0022, 355 },
    { 0x0023, 556 },
    { 0x0024, 556 },
    { 0x0025, 889 },
    { 0x0026, 667 },
    { 0x2019, 222 },
    { 0x0028, 333 },
    { 0x0029, 333 },
    { 0x002A, 389 },
    { 0x002B, 584 },
    { 0x002C, 278 },
    { 0x002D, 333 },
    { 0x002E, 278 },
    { 0x002F, 278 },
    { 0x0030, 556 },
    { 0x0031, 556 },
    { 0x0032, 556 },
    { 0x0033, 556 },
    { 0x0034, 556 },
    { 0x0035, 556 },
    { 0x0036, 556 },
    { 0x0037, 556 },
    { 0x0038, 556 },
    { 0x0039, 556 },
    { 0x003A, 278 },
    { 0x003B, 278 },
    { 0x003C, 584 },
    { 0x003D, 584 },
    { 0x003E, 584 },
    { 0x003F, 556 },
    { 0x0040, 101 },
    { 0x0041, 667 },
    { 0x0042, 667 },
    { 0x0043, 722 },
    { 0x0044, 722 },
    { 0x0045, 667 },
    { 0x0046, 611 },
    { 0x0047, 778 },
    { 0x0048, 722 },
    { 0x0049, 278 },
    { 0x004A, 500 },
    { 0x004B, 667 },
    { 0x004C, 556 },
    { 0x004D, 833 },
    { 0x004E, 722 },
    { 0x004F, 778 },
    { 0x0050, 667 },
    { 0x0051, 778 },
    { 0x0052, 722 },
    { 0x0053, 667 },
    { 0x0054, 611 },
    { 0x0055, 722 },
    { 0x0056, 667 },
    { 0x0057, 944 },
    { 0x0058, 667 },
    { 0x0059, 667 },
    { 0x005A, 611 },
    { 0x005B, 278 },
    { 0x005C, 278 },
    { 0x005D, 278 },
    { 0x005E, 469 },
    { 0x005F, 556 },
    { 0x2018, 222 },
    { 0x0061, 556 },
    { 0x0062, 556 },
    { 0x0063, 500 },
    { 0x0064, 556 },
    { 0x0065, 556 },
    { 0x0066, 278 },
    { 0x0067, 556 },
    { 0x0068, 556 },
    { 0x0069, 222 },
    { 0x006A, 222 },
    { 0x006B, 500 },
    { 0x006C, 222 },
    { 0x006D, 833 },
    { 0x006E, 556 },
    { 0x006F, 556 },
    { 0x0070, 556 },
    { 0x0071, 556 },
    { 0x0072, 333 },
    { 0x0073, 500 },
    { 0x0074, 278 },
    { 0x0075, 556 },
    { 0x0076, 500 },
    { 0x0077, 722 },
    { 0x0078, 500 },
    { 0x0079, 500 },
    { 0x007A, 500 },
    { 0x007B, 334 },
    { 0x007C, 260 },
    { 0x007D, 334 },
    { 0x007E, 584 },
    { 0x00A1, 333 },
    { 0x00A2, 556 },
    { 0x00A3, 556 },
    { 0x2044, 167 },
    { 0x00A5, 556 },
    { 0x0192, 556 },
    { 0x00A7, 556 },
    { 0x00A4, 556 },
    { 0x0027, 191 },
    { 0x201C, 333 },
    { 0x00AB, 556 },
    { 0x2039, 333 },
    { 0x203A, 333 },
    { 0xFB01, 500 },
    { 0xFB02, 500 },
    { 0x2013, 556 },
    { 0x2020, 556 },
    { 0x2021, 556 },
    { 0x00B7, 278 },
    { 0x00B6, 537 },
    { 0x2022, 350 },
    { 0x201A, 222 },
    { 0x201E, 333 },
    { 0x201D, 333 },
    { 0x00BB, 556 },
    { 0x2026, 1000 },
    { 0x2030, 1000 },
    { 0x00BF, 611 },
    { 0x0060, 333 },
    { 0x00B4, 333 },
    { 0x02C6, 333 },
    { 0x02DC, 333 },
    { 0x00AF, 333 },
    { 0x02D8, 333 },
    { 0x02D9, 333 },
    { 0x00A8, 333 },
    { 0x02DA, 333 },
    { 0x00B8, 333 },
    { 0x02DD, 333 },
    { 0x02DB, 333 },
    { 0x02C7, 333 },
    { 0x2014, 1000 },
    { 0x00C6, 1000 },
    { 0x00AA, 370 },
    { 0x0141, 556 },
    { 0x00D8, 778 },
    { 0x0152, 1000 },
    { 0x00BA, 365 },
    { 0x00E6, 889 },
    { 0x0131, 278 },
    { 0x0142, 222 },
    { 0x00F8, 611 },
    { 0x0153, 944 },
    { 0x00DF, 611 },
    { 0x00CF, 278 },
    { 0x00E9, 556 },
    { 0x0103, 556 },
    { 0x0171, 556 },
    { 0x011B, 556 },
    { 0x0178, 667 },
    { 0x00F7, 584 },
    { 0x00DD, 667 },
    { 0x00C2, 667 },
    { 0x00E1, 556 },
    { 0x00DB, 722 },
    { 0x00FD, 500 },
    { 0x0219, 500 },
    { 0x00EA, 556 },
    { 0x016E, 722 },
    { 0x00DC, 722 },
    { 0x0105, 556 },
    { 0x00DA, 722 },
    { 0x0173, 556 },
    { 0x00CB, 667 },
    { 0x0110, 722 },
    { 0xF6C3, 250 },
    { 0x00A9, 737 },
    { 0x0112, 667 },
    { 0x010D, 500 },
    { 0x00E5, 556 },
    { 0x0145, 722 },
    { 0x013A, 222 },
    { 0x00E0, 556 },
    { 0x0162, 611 },
    { 0x0106, 722 },
    { 0x00E3, 556 },
    { 0x0116, 667 },
    { 0x0161, 500 },
    { 0x015F, 500 },
    { 0x00ED, 278 },
    { 0x25CA, 471 },
    { 0x0158, 722 },
    { 0x0122, 778 },
    { 0x00FB, 556 },
    { 0x00E2, 556 },
    { 0x0100, 667 },
    { 0x0159, 333 },
    { 0x00E7, 500 },
    { 0x017B, 611 },
    { 0x00DE, 667 },
    { 0x014C, 778 },
    { 0x0154, 722 },
    { 0x015A, 667 },
    { 0x010F, 643 },
    { 0x016A, 722 },
    { 0x016F, 556 },
    { 0x00B3, 333 },
    { 0x00D2, 778 },
    { 0x00C0, 667 },
    { 0x0102, 667 },
    { 0x00D7, 584 },
    { 0x00FA, 556 },
    { 0x0164, 611 },
    { 0x2202, 476 },
    { 0x00FF, 500 },
    { 0x0143, 722 },
    { 0x00EE, 278 },
    { 0x00CA, 667 },
    { 0x00E4, 556 },
    { 0x00EB, 556 },
    { 0x0107, 500 },
    { 0x0144, 556 },
    { 0x016B, 556 },
    { 0x0147, 722 },
    { 0x00CD, 278 },
    { 0x00B1, 584 },
    { 0x00A6, 260 },
    { 0x00AE, 737 },
    { 0x011E, 778 },
    { 0x0130, 278 },
    { 0x2211, 600 },
    { 0x00C8, 667 },
    { 0x0155, 333 },
    { 0x014D, 556 },
    { 0x0179, 611 },
    { 0x017D, 611 },
    { 0x2265, 549 },
    { 0x00D0, 722 },
    { 0x00C7, 722 },
    { 0x013C, 222 },
    { 0x0165, 316 },
    { 0x0119, 556 },
    { 0x0172, 722 },
    { 0x00C1, 667 },
    { 0x00C4, 667 },
    { 0x00E8, 556 },
    { 0x017A, 500 },
    { 0x012F, 222 },
    { 0x00D3, 778 },
    { 0x00F3, 556 },
    { 0x0101, 556 },
    { 0x015B, 500 },
    { 0x00EF, 278 },
    { 0x00D4, 778 },
    { 0x00D9, 722 },
    { 0x0394, 612 },
    { 0x00FE, 556 },
    { 0x00B2, 333 },
    { 0x00D6, 778 },
    { 0x00B5, 556 },
    { 0x00EC, 278 },
    { 0x0151, 556 },
    { 0x0118, 667 },
    { 0x0111, 556 },
    { 0x00BE, 834 },
    { 0x015E, 667 },
    { 0x013E, 299 },
    { 0x0136, 667 },
    { 0x0139, 556 },
    { 0x2122, 1000 },
    { 0x0117, 556 },
    { 0x00CC, 278 },
    { 0x012A, 278 },
    { 0x013D, 556 },
    { 0x00BD, 834 },
    { 0x2264, 549 },
    { 0x00F4, 556 },
    { 0x00F1, 556 },
    { 0x0170, 722 },
    { 0x00C9, 667 },
    { 0x0113, 556 },
    { 0x011F, 556 },
    { 0x00BC, 834 },
    { 0x0160, 667 },
    { 0x0218, 667 },
    { 0x0150, 778 },
    { 0x00B0, 400 },
    { 0x00F2, 556 },
    { 0x010C, 722 },
    { 0x00F9, 556 },
    { 0x221A, 453 },
    { 0x010E, 722 },
    { 0x0157, 333 },
    { 0x00D1, 722 },
    { 0x00F5, 556 },
    { 0x0156, 722 },
    { 0x013B, 556 },
    { 0x00C3, 667 },
    { 0x0104, 667 },
    { 0x00C5, 667 },
    { 0x00D5, 778 },
    { 0x017C, 500 },
    { 0x011A, 667 },
    { 0x012E, 278 },
    { 0x0137, 500 },
    { 0x2212, 584 },
    { 0x00CE, 278 },
    { 0x0148, 556 },
    { 0x0163, 278 },
    { 0x00AC, 584 },
    { 0x00F6, 556 },
    { 0x00FC, 556 },
    { 0x2260, 549 },
    { 0x0123, 556 },
    { 0x00F0, 556 },
    { 0x017E, 500 },
    { 0x0146, 556 },
    { 0x00B9, 333 },
    { 0x012B, 278 },
    { 0x20AC, 556 },
};

static const Standard14FontChar CHAR_DATA_HELVETICA_BOLD[315] = {
    { 0x0020, 278 },
    { 0x0021, 333 },
    { 0x0022, 474 },
    { 0x0023, 556 },
    { 0x0024, 556 },
    { 0x0025, 889 },
    { 0x0026, 722 },
    { 0x2019, 278 },
    { 0x0028, 333 },
    { 0x0029, 333 },
    { 0x002A, 389 },
    { 0x002B, 584 },
    { 0x002C, 278 },
    { 0x002D, 333 },
    { 0x002E, 278 },
    { 0x002F, 278 },
    { 0x0030, 556 },
    { 0x0031, 556 },
    { 0x0032, 556 },
    { 0x0033, 556 },
    { 0x0034, 556 },
    { 0x0035, 556 },
    { 0x0036, 556 },
    { 0x0037, 556 },
    { 0x0038, 556 },
    { 0x0039, 556 },
    { 0x003A, 333 },
    { 0x003B, 333 },
    { 0x003C, 584 },
    { 0x003D, 584 },
    { 0x003E, 584 },
    { 0x003F, 611 },
    { 0x0040, 975 },
    { 0x0041, 722 },
    { 0x0042, 722 },
    { 0x0043, 722 },
    { 0x0044, 722 },
    { 0x0045, 667 },
    { 0x0046, 611 },
    { 0x0047, 778 },
    { 0x0048, 722 },
    { 0x0049, 278 },
    { 0x004A, 556 },
    { 0x004B, 722 },
    { 0x004C, 611 },
    { 0x004D, 833 },
    { 0x004E, 722 },
    { 0x004F, 778 },
    { 0x0050, 667 },
    { 0x0051, 778 },
    { 0x0052, 722 },
    { 0x0053, 667 },
    { 0x0054, 611 },
    { 0x0055, 722 },
    { 0x0056, 667 },
    { 0x0057, 944 },
    { 0x0058, 667 },
    { 0x0059, 667 },
    { 0x005A, 611 },
    { 0x005B, 333 },
    { 0x005C, 278 },
    { 0x005D, 333 },
    { 0x005E, 584 },
    { 0x005F, 556 },
    { 0x2018, 278 },
    { 0x0061, 556 },
    { 0x0062, 611 },
    { 0x0063, 556 },
    { 0x0064, 611 },
    { 0x0065, 556 },
    { 0x0066, 333 },
    { 0x0067, 611 },
    { 0x0068, 611 },
    { 0x0069, 278 },
    { 0x006A, 278 },
    { 0x006B, 556 },
    { 0x006C, 278 },
    { 0x006D, 889 },
    { 0x006E, 611 },
    { 0x006F, 611 },
    { 0x0070, 611 },
    { 0x0071, 611 },
    { 0x0072, 389 },
    { 0x0073, 556 },
    { 0x0074, 333 },
    { 0x0075, 611 },
    { 0x0076, 556 },
    { 0x0077, 778 },
    { 0x0078, 556 },
    { 0x0079, 556 },
    { 0x007A, 500 },
    { 0x007B, 389 },
    { 0x007C, 280 },
    { 0x007D, 389 },
    { 0x007E, 584 },
    { 0x00A1, 333 },
    { 0x00A2, 556 },
    { 0x00A3, 556 },
    { 0x2044, 167 },
    { 0x00A5, 556 },
    { 0x0192, 556 },
    { 0x00A7, 556 },
    { 0x00A4, 556 },
    { 0x0027, 238 },
    { 0x201C, 500 },
    { 0x00AB, 556 },
    { 0x2039, 333 },
    { 0x203A, 333 },
    { 0xFB01, 611 },
    { 0xFB02, 611 },
    { 0x2013, 556 },
    { 0x2020, 556 },
    { 0x2021, 556 },
    { 0x00B7, 278 },
    { 0x00B6, 556 },
    { 0x2022, 350 },
    { 0x201A, 278 },
    { 0x201E, 500 },
    { 0x201D, 500 },
    { 0x00BB, 556 },
    { 0x2026, 1000 },
    { 0x2030, 1000 },
    { 0x00BF, 611 },
    { 0x0060, 333 },
    { 0x00B4, 333 },
    { 0x02C6, 333 },
    { 0x02DC, 333 },
    { 0x00AF, 333 },
    { 0x02D8, 333 },
    { 0x02D9, 333 },
    { 0x00A8, 333 },
    { 0x02DA, 333 },
    { 0x00B8, 333 },
    { 0x02DD, 333 },
    { 0x02DB, 333 },
    { 0x02C7, 333 },
    { 0x2014, 1000 },
    { 0x00C6, 1000 },
    { 0x00AA, 370 },
    { 0x0141, 611 },
    { 0x00D8, 778 },
    { 0x0152, 1000 },
    { 0x00BA, 365 },
    { 0x00E6, 889 },
    { 0x0131, 278 },
    { 0x0142, 278 },
    { 0x00F8, 611 },
    { 0x0153, 944 },
    { 0x00DF, 611 },
    { 0x00CF, 278 },
    { 0x00E9, 556 },
    { 0x0103, 556 },
    { 0x0171, 611 },
    { 0x011B, 556 },
    { 0x0178, 667 },
    { 0x00F7, 584 },
    { 0x00DD, 667 },
    { 0x00C2, 722 },
    { 0x00E1, 556 },
    { 0x00DB, 722 },
    { 0x00FD, 556 },
    { 0x0219, 556 },
    { 0x00EA, 556 },
    { 0x016E, 722 },
    { 0x00DC, 722 },
    { 0x0105, 556 },
    { 0x00DA, 722 },
    { 0x0173, 611 },
    { 0x00CB, 667 },
    { 0x0110, 722 },
    { 0xF6C3, 250 },
    { 0x00A9, 737 },
    { 0x0112, 667 },
    { 0x010D, 556 },
    { 0x00E5, 556 },
    { 0x0145, 722 },
    { 0x013A, 278 },
    { 0x00E0, 556 },
    { 0x0162, 611 },
    { 0x0106, 722 },
    { 0x00E3, 556 },
    { 0x0116, 667 },
    { 0x0161, 556 },
    { 0x015F, 556 },
    { 0x00ED, 278 },
    { 0x25CA, 494 },
    { 0x0158, 722 },
    { 0x0122, 778 },
    { 0x00FB, 611 },
    { 0x00E2, 556 },
    { 0x0100, 722 },
    { 0x0159, 389 },
    { 0x00E7, 556 },
    { 0x017B, 611 },
    { 0x00DE, 667 },
    { 0x014C, 778 },
    { 0x0154, 722 },
    { 0x015A, 667 },
    { 0x010F, 743 },
    { 0x016A, 722 },
    { 0x016F, 611 },
    { 0x00B3, 333 },
    { 0x00D2, 778 },
    { 0x00C0, 722 },
    { 0x0102, 722 },
    { 0x00D7, 584 },
    { 0x00FA, 611 },
    { 0x0164, 611 },
    { 0x2202, 494 },
    { 0x00FF, 556 },
    { 0x0143, 722 },
    { 0x00EE, 278 },
    { 0x00CA, 667 },
    { 0x00E4, 556 },
    { 0x00EB, 556 },
    { 0x0107, 556 },
    { 0x0144, 611 },
    { 0x016B, 611 },
    { 0x0147, 722 },
    { 0x00CD, 278 },
    { 0x00B1, 584 },
    { 0x00A6, 280 },
    { 0x00AE, 737 },
    { 0x011E, 778 },
    { 0x0130, 278 },
    { 0x2211, 600 },
    { 0x00C8, 667 },
    { 0x0155, 389 },
    { 0x014D, 611 },
    { 0x0179, 611 },
    { 0x017D, 611 },
    { 0x2265, 549 },
    { 0x00D0, 722 },
    { 0x00C7, 722 },
    { 0x013C, 278 },
    { 0x0165, 389 },
    { 0x0119, 556 },
    { 0x0172, 722 },
    { 0x00C1, 722 },
    { 0x00C4, 722 },
    { 0x00E8, 556 },
    { 0x017A, 500 },
    { 0x012F, 278 },
    { 0x00D3, 778 },
    { 0x00F3, 611 },
    { 0x0101, 556 },
    { 0x015B, 556 },
    { 0x00EF, 278 },
    { 0x00D4, 778 },
    { 0x00D9, 722 },
    { 0x0394, 612 },
    { 0x00FE, 611 },
    { 0x00B2, 333 },
    { 0x00D6, 778 },
    { 0x00B5, 611 },
    { 0x00EC, 278 },
    { 0x0151, 611 },
    { 0x0118, 667 },
    { 0x0111, 611 },
    { 0x00BE, 834 },
    { 0x015E, 667 },
    { 0x013E, 400 },
    { 0x0136, 722 },
    { 0x0139, 611 },
    { 0x2122, 1000 },
    { 0x0117, 556 },
    { 0x00CC, 278 },
    { 0x012A, 278 },
    { 0x013D, 611 },
    { 0x00BD, 834 },
    { 0x2264, 549 },
    { 0x00F4, 611 },
    { 0x00F1, 611 },
    { 0x0170, 722 },
    { 0x00C9, 667 },
    { 0x0113, 556 },
    { 0x011F, 611 },
    { 0x00BC, 834 },
    { 0x0160, 667 },
    { 0x0218, 667 },
    { 0x0150, 778 },
    { 0x00B0, 400 },
    { 0x00F2, 611 },
    { 0x010C, 722 },
    { 0x00F9, 611 },
    { 0x221A, 549 },
    { 0x010E, 722 },
    { 0x0157, 389 },
    { 0x00D1, 722 },
    { 0x00F5, 611 },
    { 0x0156, 722 },
    { 0x013B, 611 },
    { 0x00C3, 722 },
    { 0x0104, 722 },
    { 0x00C5, 722 },
    { 0x00D5, 778 },
    { 0x017C, 500 },
    { 0x011A, 667 },
    { 0x012E, 278 },
    { 0x0137, 556 },
    { 0x2212, 584 },
    { 0x00CE, 278 },
    { 0x0148, 611 },
    { 0x0163, 333 },
    { 0x00AC, 584 },
    { 0x00F6, 611 },
    { 0x00FC, 611 },
    { 0x2260, 549 },
    { 0x0123, 611 },
    { 0x00F0, 611 },
    { 0x017E, 500 },
    { 0x0146, 611 },
    { 0x00B9, 333 },
    { 0x012B, 278 },
    { 0x20AC, 556 },
};

static const Standard14FontChar CHAR_DATA_HELVETICA_BOLD_OBLIQUE[315] = {
    { 0x0020, 278 },
    { 0x0021, 333 },
    { 0x0022, 474 },
    { 0x0023, 556 },
    { 0x0024, 556 },
    { 0x0025, 889 },
    { 0x0026, 722 },
    { 0x2019, 278 },
    { 0x0028, 333 },
    { 0x0029, 333 },
    { 0x002A, 389 },
    { 0x002B, 584 },
    { 0x002C, 278 },
    { 0x002D, 333 },
    { 0x002E, 278 },
    { 0x002F, 278 },
    { 0x0030, 556 },
    { 0x0031, 556 },
    { 0x0032, 556 },
    { 0x0033, 556 },
    { 0x0034, 556 },
    { 0x0035, 556 },
    { 0x0036, 556 },
    { 0x0037, 556 },
    { 0x0038, 556 },
    { 0x0039, 556 },
    { 0x003A, 333 },
    { 0x003B, 333 },
    { 0x003C, 584 },
    { 0x003D, 584 },
    { 0x003E, 584 },
    { 0x003F, 611 },
    { 0x0040, 975 },
    { 0x0041, 722 },
    { 0x0042, 722 },
    { 0x0043, 722 },
    { 0x0044, 722 },
    { 0x0045, 667 },
    { 0x0046, 611 },
    { 0x0047, 778 },
    { 0x0048, 722 },
    { 0x0049, 278 },
    { 0x004A, 556 },
    { 0x004B, 722 },
    { 0x004C, 611 },
    { 0x004D, 833 },
    { 0x004E, 722 },
    { 0x004F, 778 },
    { 0x0050, 667 },
    { 0x0051, 778 },
    { 0x0052, 722 },
    { 0x0053, 667 },
    { 0x0054, 611 },
    { 0x0055, 722 },
    { 0x0056, 667 },
    { 0x0057, 944 },
    { 0x0058, 667 },
    { 0x0059, 667 },
    { 0x005A, 611 },
    { 0x005B, 333 },
    { 0x005C, 278 },
    { 0x005D, 333 },
    { 0x005E, 584 },
    { 0x005F, 556 },
    { 0x2018, 278 },
    { 0x0061, 556 },
    { 0x0062, 611 },
    { 0x0063, 556 },
    { 0x0064, 611 },
    { 0x0065, 556 },
    { 0x0066, 333 },
    { 0x0067, 611 },
    { 0x0068, 611 },
    { 0x0069, 278 },
    { 0x006A, 278 },
    { 0x006B, 556 },
    { 0x006C, 278 },
    { 0x006D, 889 },
    { 0x006E, 611 },
    { 0x006F, 611 },
    { 0x0070, 611 },
    { 0x0071, 611 },
    { 0x0072, 389 },
    { 0x0073, 556 },
    { 0x0074, 333 },
    { 0x0075, 611 },
    { 0x0076, 556 },
    { 0x0077, 778 },
    { 0x0078, 556 },
    { 0x0079, 556 },
    { 0x007A, 500 },
    { 0x007B, 389 },
    { 0x007C, 280 },
    { 0x007D, 389 },
    { 0x007E, 584 },
    { 0x00A1, 333 },
    { 0x00A2, 556 },
    { 0x00A3, 556 },
    { 0x2044, 167 },
    { 0x00A5, 556 },
    { 0x0192, 556 },
    { 0x00A7, 556 },
    { 0x00A4, 556 },
    { 0x0027, 238 },
    { 0x201C, 500 },
    { 0x00AB, 556 },
    { 0x2039, 333 },
    { 0x203A, 333 },
    { 0xFB01, 611 },
    { 0xFB02, 611 },
    { 0x2013, 556 },
    { 0x2020, 556 },
    { 0x2021, 556 },
    { 0x00B7, 278 },
    { 0x00B6, 556 },
    { 0x2022, 350 },
    { 0x201A, 278 },
    { 0x201E, 500 },
    { 0x201D, 500 },
    { 0x00BB, 556 },
    { 0x2026, 1000 },
    { 0x2030, 1000 },
    { 0x00BF, 611 },
    { 0x0060, 333 },
    { 0x00B4, 333 },
    { 0x02C6, 333 },
    { 0x02DC, 333 },
    { 0x00AF, 333 },
    { 0x02D8, 333 },
    { 0x02D9, 333 },
    { 0x00A8, 333 },
    { 0x02DA, 333 },
    { 0x00B8, 333 },
    { 0x02DD, 333 },
    { 0x02DB, 333 },
    { 0x02C7, 333 },
    { 0x2014, 1000 },
    { 0x00C6, 1000 },
    { 0x00AA, 370 },
    { 0x0141, 611 },
    { 0x00D8, 778 },
    { 0x0152, 1000 },
    { 0x00BA, 365 },
    { 0x00E6, 889 },
    { 0x0131, 278 },
    { 0x0142, 278 },
    { 0x00F8, 611 },
    { 0x0153, 944 },
    { 0x00DF, 611 },
    { 0x00CF, 278 },
    { 0x00E9, 556 },
    { 0x0103, 556 },
    { 0x0171, 611 },
    { 0x011B, 556 },
    { 0x0178, 667 },
    { 0x00F7, 584 },
    { 0x00DD, 667 },
    { 0x00C2, 722 },
    { 0x00E1, 556 },
    { 0x00DB, 722 },
    { 0x00FD, 556 },
    { 0x0219, 556 },
    { 0x00EA, 556 },
    { 0x016E, 722 },
    { 0x00DC, 722 },
    { 0x0105, 556 },
    { 0x00DA, 722 },
    { 0x0173, 611 },
    { 0x00CB, 667 },
    { 0x0110, 722 },
    { 0xF6C3, 250 },
    { 0x00A9, 737 },
    { 0x0112, 667 },
    { 0x010D, 556 },
    { 0x00E5, 556 },
    { 0x0145, 722 },
    { 0x013A, 278 },
    { 0x00E0, 556 },
    { 0x0162, 611 },
    { 0x0106, 722 },
    { 0x00E3, 556 },
    { 0x0116, 667 },
    { 0x0161, 556 },
    { 0x015F, 556 },
    { 0x00ED, 278 },
    { 0x25CA, 494 },
    { 0x0158, 722 },
    { 0x0122, 778 },
    { 0x00FB, 611 },
    { 0x00E2, 556 },
    { 0x0100, 722 },
    { 0x0159, 389 },
    { 0x00E7, 556 },
    { 0x017B, 611 },
    { 0x00DE, 667 },
    { 0x014C, 778 },
    { 0x0154, 722 },
    { 0x015A, 667 },
    { 0x010F, 743 },
    { 0x016A, 722 },
    { 0x016F, 611 },
    { 0x00B3, 333 },
    { 0x00D2, 778 },
    { 0x00C0, 722 },
    { 0x0102, 722 },
    { 0x00D7, 584 },
    { 0x00FA, 611 },
    { 0x0164, 611 },
    { 0x2202, 494 },
    { 0x00FF, 556 },
    { 0x0143, 722 },
    { 0x00EE, 278 },
    { 0x00CA, 667 },
    { 0x00E4, 556 },
    { 0x00EB, 556 },
    { 0x0107, 556 },
    { 0x0144, 611 },
    { 0x016B, 611 },
    { 0x0147, 722 },
    { 0x00CD, 278 },
    { 0x00B1, 584 },
    { 0x00A6, 280 },
    { 0x00AE, 737 },
    { 0x011E, 778 },
    { 0x0130, 278 },
    { 0x2211, 600 },
    { 0x00C8, 667 },
    { 0x0155, 389 },
    { 0x014D, 611 },
    { 0x0179, 611 },
    { 0x017D, 611 },
    { 0x2265, 549 },
    { 0x00D0, 722 },
    { 0x00C7, 722 },
    { 0x013C, 278 },
    { 0x0165, 389 },
    { 0x0119, 556 },
    { 0x0172, 722 },
    { 0x00C1, 722 },
    { 0x00C4, 722 },
    { 0x00E8, 556 },
    { 0x017A, 500 },
    { 0x012F, 278 },
    { 0x00D3, 778 },
    { 0x00F3, 611 },
    { 0x0101, 556 },
    { 0x015B, 556 },
    { 0x00EF, 278 },
    { 0x00D4, 778 },
    { 0x00D9, 722 },
    { 0x0394, 612 },
    { 0x00FE, 611 },
    { 0x00B2, 333 },
    { 0x00D6, 778 },
    { 0x00B5, 611 },
    { 0x00EC, 278 },
    { 0x0151, 611 },
    { 0x0118, 667 },
    { 0x0111, 611 },
    { 0x00BE, 834 },
    { 0x015E, 667 },
    { 0x013E, 400 },
    { 0x0136, 722 },
    { 0x0139, 611 },
    { 0x2122, 1000 },
    { 0x0117, 556 },
    { 0x00CC, 278 },
    { 0x012A, 278 },
    { 0x013D, 611 },
    { 0x00BD, 834 },
    { 0x2264, 549 },
    { 0x00F4, 611 },
    { 0x00F1, 611 },
    { 0x0170, 722 },
    { 0x00C9, 667 },
    { 0x0113, 556 },
    { 0x011F, 611 },
    { 0x00BC, 834 },
    { 0x0160, 667 },
    { 0x0218, 667 },
    { 0x0150, 778 },
    { 0x00B0, 400 },
    { 0x00F2, 611 },
    { 0x010C, 722 },
    { 0x00F9, 611 },
    { 0x221A, 549 },
    { 0x010E, 722 },
    { 0x0157, 389 },
    { 0x00D1, 722 },
    { 0x00F5, 611 },
    { 0x0156, 722 },
    { 0x013B, 611 },
    { 0x00C3, 722 },
    { 0x0104, 722 },
    { 0x00C5, 722 },
    { 0x00D5, 778 },
    { 0x017C, 500 },
    { 0x011A, 667 },
    { 0x012E, 278 },
    { 0x0137, 556 },
    { 0x2212, 584 },
    { 0x00CE, 278 },
    { 0x0148, 611 },
    { 0x0163, 333 },
    { 0x00AC, 584 },
    { 0x00F6, 611 },
    { 0x00FC, 611 },
    { 0x2260, 549 },
    { 0x0123, 611 },
    { 0x00F0, 611 },
    { 0x017E, 500 },
    { 0x0146, 611 },
    { 0x00B9, 333 },
    { 0x012B, 278 },
    { 0x20AC, 556 },
};

static const Standard14FontChar CHAR_DATA_HELVETICA_OBLIQUE[315] = {
    { 0x0020, 278 },
    { 0x0021, 278 },
    { 0x0022, 355 },
    { 0x0023, 556 },
    { 0x0024, 556 },
    { 0x0025, 889 },
    { 0x0026, 667 },
    { 0x2019, 222 },
    { 0x0028, 333 },
    { 0x0029, 333 },
    { 0x002A, 389 },
    { 0x002B, 584 },
    { 0x002C, 278 },
    { 0x002D, 333 },
    { 0x002E, 278 },
    { 0x002F, 278 },
    { 0x0030, 556 },
    { 0x0031, 556 },
    { 0x0032, 556 },
    { 0x0033, 556 },
    { 0x0034, 556 },
    { 0x0035, 556 },
    { 0x0036, 556 },
    { 0x0037, 556 },
    { 0x0038, 556 },
    { 0x0039, 556 },
    { 0x003A, 278 },
    { 0x003B, 278 },
    { 0x003C, 584 },
    { 0x003D, 584 },
    { 0x003E, 584 },
    { 0x003F, 556 },
    { 0x0040, 1015 },
    { 0x0041, 667 },
    { 0x0042, 667 },
    { 0x0043, 722 },
    { 0x0044, 722 },
    { 0x0045, 667 },
    { 0x0046, 611 },
    { 0x0047, 778 },
    { 0x0048, 722 },
    { 0x0049, 278 },
    { 0x004A, 500 },
    { 0x004B, 667 },
    { 0x004C, 556 },
    { 0x004D, 833 },
    { 0x004E, 722 },
    { 0x004F, 778 },
    { 0x0050, 667 },
    { 0x0051, 778 },
    { 0x0052, 722 },
    { 0x0053, 667 },
    { 0x0054, 611 },
    { 0x0055, 722 },
    { 0x0056, 667 },
    { 0x0057, 944 },
    { 0x0058, 667 },
    { 0x0059, 667 },
    { 0x005A, 611 },
    { 0x005B, 278 },
    { 0x005C, 278 },
    { 0x005D, 278 },
    { 0x005E, 469 },
    { 0x005F, 556 },
    { 0x2018, 222 },
    { 0x0061, 556 },
    { 0x0062, 556 },
    { 0x0063, 500 },
    { 0x0064, 556 },
    { 0x0065, 556 },
    { 0x0066, 278 },
    { 0x0067, 556 },
    { 0x0068, 556 },
    { 0x0069, 222 },
    { 0x006A, 222 },
    { 0x006B, 500 },
    { 0x006C, 222 },
    { 0x006D, 833 },
    { 0x006E, 556 },
    { 0x006F, 556 },
    { 0x0070, 556 },
    { 0x0071, 556 },
    { 0x0072, 333 },
    { 0x0073, 500 },
    { 0x0074, 278 },
    { 0x0075, 556 },
    { 0x0076, 500 },
    { 0x0077, 722 },
    { 0x0078, 500 },
    { 0x0079, 500 },
    { 0x007A, 500 },
    { 0x007B, 334 },
    { 0x007C, 260 },
    { 0x007D, 334 },
    { 0x007E, 584 },
    { 0x00A1, 333 },
    { 0x00A2, 556 },
    { 0x00A3, 556 },
    { 0x2044, 167 },
    { 0x00A5, 556 },
    { 0x0192, 556 },
    { 0x00A7, 556 },
    { 0x00A4, 556 },
    { 0x0027, 191 },
    { 0x201C, 333 },
    { 0x00AB, 556 },
    { 0x2039, 333 },
    { 0x203A, 333 },
    { 0xFB01, 500 },
    { 0xFB02, 500 },
    { 0x2013, 556 },
    { 0x2020, 556 },
    { 0x2021, 556 },
    { 0x00B7, 278 },
    { 0x00B6, 537 },
    { 0x2022, 350 },
    { 0x201A, 222 },
    { 0x201E, 333 },
    { 0x201D, 333 },
    { 0x00BB, 556 },
    { 0x2026, 1000 },
    { 0x2030, 1000 },
    { 0x00BF, 611 },
    { 0x0060, 333 },
    { 0x00B4, 333 },
    { 0x02C6, 333 },
    { 0x02DC, 333 },
    { 0x00AF, 333 },
    { 0x02D8, 333 },
    { 0x02D9, 333 },
    { 0x00A8, 333 },
    { 0x02DA, 333 },
    { 0x00B8, 333 },
    { 0x02DD, 333 },
    { 0x02DB, 333 },
    { 0x02C7, 333 },
    { 0x2014, 1000 },
    { 0x00C6, 1000 },
    { 0x00AA, 370 },
    { 0x0141, 556 },
    { 0x00D8, 778 },
    { 0x0152, 1000 },
    { 0x00BA, 365 },
    { 0x00E6, 889 },
    { 0x0131, 278 },
    { 0x0142, 222 },
    { 0x00F8, 611 },
    { 0x0153, 944 },
    { 0x00DF, 611 },
    { 0x00CF, 278 },
    { 0x00E9, 556 },
    { 0x0103, 556 },
    { 0x0171, 556 },
    { 0x011B, 556 },
    { 0x0178, 667 },
    { 0x00F7, 584 },
    { 0x00DD, 667 },
    { 0x00C2, 667 },
    { 0x00E1, 556 },
    { 0x00DB, 722 },
    { 0x00FD, 500 },
    { 0x0219, 500 },
    { 0x00EA, 556 },
    { 0x016E, 722 },
    { 0x00DC, 722 },
    { 0x0105, 556 },
    { 0x00DA, 722 },
    { 0x0173, 556 },
    { 0x00CB, 667 },
    { 0x0110, 722 },
    { 0xF6C3, 250 },
    { 0x00A9, 737 },
    { 0x0112, 667 },
    { 0x010D, 500 },
    { 0x00E5, 556 },
    { 0x0145, 722 },
    { 0x013A, 222 },
    { 0x00E0, 556 },
    { 0x0162, 611 },
    { 0x0106, 722 },
    { 0x00E3, 556 },
    { 0x0116, 667 },
    { 0x0161, 500 },
    { 0x015F, 500 },
    { 0x00ED, 278 },
    { 0x25CA, 471 },
    { 0x0158, 722 },
    { 0x0122, 778 },
    { 0x00FB, 556 },
    { 0x00E2, 556 },
    { 0x0100, 667 },
    { 0x0159, 333 },
    { 0x00E7, 500 },
    { 0x017B, 611 },
    { 0x00DE, 667 },
    { 0x014C, 778 },
    { 0x0154, 722 },
    { 0x015A, 667 },
    { 0x010F, 643 },
    { 0x016A, 722 },
    { 0x016F, 556 },
    { 0x00B3, 333 },
    { 0x00D2, 778 },
    { 0x00C0, 667 },
    { 0x0102, 667 },
    { 0x00D7, 584 },
    { 0x00FA, 556 },
    { 0x0164, 611 },
    { 0x2202, 476 },
    { 0x00FF, 500 },
    { 0x0143, 722 },
    { 0x00EE, 278 },
    { 0x00CA, 667 },
    { 0x00E4, 556 },
    { 0x00EB, 556 },
    { 0x0107, 500 },
    { 0x0144, 556 },
    { 0x016B, 556 },
    { 0x0147, 722 },
    { 0x00CD, 278 },
    { 0x00B1, 584 },
    { 0x00A6, 260 },
    { 0x00AE, 737 },
    { 0x011E, 778 },
    { 0x0130, 278 },
    { 0x2211, 600 },
    { 0x00C8, 667 },
    { 0x0155, 333 },
    { 0x014D, 556 },
    { 0x0179, 611 },
    { 0x017D, 611 },
    { 0x2265, 549 },
    { 0x00D0, 722 },
    { 0x00C7, 722 },
    { 0x013C, 222 },
    { 0x0165, 316 },
    { 0x0119, 556 },
    { 0x0172, 722 },
    { 0x00C1, 667 },
    { 0x00C4, 667 },
    { 0x00E8, 556 },
    { 0x017A, 500 },
    { 0x012F, 222 },
    { 0x00D3, 778 },
    { 0x00F3, 556 },
    { 0x0101, 556 },
    { 0x015B, 500 },
    { 0x00EF, 278 },
    { 0x00D4, 778 },
    { 0x00D9, 722 },
    { 0x0394, 612 },
    { 0x00FE, 556 },
    { 0x00B2, 333 },
    { 0x00D6, 778 },
    { 0x00B5, 556 },
    { 0x00EC, 278 },
    { 0x0151, 556 },
    { 0x0118, 667 },
    { 0x0111, 556 },
    { 0x00BE, 834 },
    { 0x015E, 667 },
    { 0x013E, 299 },
    { 0x0136, 667 },
    { 0x0139, 556 },
    { 0x2122, 1000 },
    { 0x0117, 556 },
    { 0x00CC, 278 },
    { 0x012A, 278 },
    { 0x013D, 556 },
    { 0x00BD, 834 },
    { 0x2264, 549 },
    { 0x00F4, 556 },
    { 0x00F1, 556 },
    { 0x0170, 722 },
    { 0x00C9, 667 },
    { 0x0113, 556 },
    { 0x011F, 556 },
    { 0x00BC, 834 },
    { 0x0160, 667 },
    { 0x0218, 667 },
    { 0x0150, 778 },
    { 0x00B0, 400 },
    { 0x00F2, 556 },
    { 0x010C, 722 },
    { 0x00F9, 556 },
    { 0x221A, 453 },
    { 0x010E, 722 },
    { 0x0157, 333 },
    { 0x00D1, 722 },
    { 0x00F5, 556 },
    { 0x0156, 722 },
    { 0x013B, 556 },
    { 0x00C3, 667 },
    { 0x0104, 667 },
    { 0x00C5, 667 },
    { 0x00D5, 778 },
    { 0x017C, 500 },
    { 0x011A, 667 },
    { 0x012E, 278 },
    { 0x0137, 500 },
    { 0x2212, 584 },
    { 0x00CE, 278 },
    { 0x0148, 556 },
    { 0x0163, 278 },
    { 0x00AC, 584 },
    { 0x00F6, 556 },
    { 0x00FC, 556 },
    { 0x2260, 549 },
    { 0x0123, 556 },
    { 0x00F0, 556 },
    { 0x017E, 500 },
    { 0x0146, 556 },
    { 0x00B9, 333 },
    { 0x012B, 278 },
    { 0x20AC, 556 },
};

static const Standard14FontChar CHAR_DATA_TIMES_ROMAN[315] = {
    { 0x0020, 250 },
    { 0x0021, 333 },
    { 0x0022, 408 },
    { 0x0023, 500 },
    { 0x0024, 500 },
    { 0x0025, 833 },
    { 0x0026, 778 },
    { 0x2019, 333 },
    { 0x0028, 333 },
    { 0x0029, 333 },
    { 0x002A, 500 },
    { 0x002B, 564 },
    { 0x002C, 250 },
    { 0x002D, 333 },
    { 0x002E, 250 },
    { 0x002F, 278 },
    { 0x0030, 500 },
    { 0x0031, 500 },
    { 0x0032, 500 },
    { 0x0033, 500 },
    { 0x0034, 500 },
    { 0x0035, 500 },
    { 0x0036, 500 },
    { 0x0037, 500 },
    { 0x0038, 500 },
    { 0x0039, 500 },
    { 0x003A, 278 },
    { 0x003B, 278 },
    { 0x003C, 564 },
    { 0x003D, 564 },
    { 0x003E, 564 },
    { 0x003F, 444 },
    { 0x0040, 921 },
    { 0x0041, 722 },
    { 0x0042, 667 },
    { 0x0043, 667 },
    { 0x0044, 722 },
    { 0x0045, 611 },
    { 0x0046, 556 },
    { 0x0047, 722 },
    { 0x0048, 722 },
    { 0x0049, 333 },
    { 0x004A, 389 },
    { 0x004B, 722 },
    { 0x004C, 611 },
    { 0x004D, 889 },
    { 0x004E, 722 },
    { 0x004F, 722 },
    { 0x0050, 556 },
    { 0x0051, 722 },
    { 0x0052, 667 },
    { 0x0053, 556 },
    { 0x0054, 611 },
    { 0x0055, 722 },
    { 0x0056, 722 },
    { 0x0057, 944 },
    { 0x0058, 722 },
    { 0x0059, 722 },
    { 0x005A, 611 },
    { 0x005B, 333 },
    { 0x005C, 278 },
    { 0x005D, 333 },
    { 0x005E, 469 },
    { 0x005F, 500 },
    { 0x2018, 333 },
    { 0x0061, 444 },
    { 0x0062, 500 },
    { 0x0063, 444 },
    { 0x0064, 500 },
    { 0x0065, 444 },
    { 0x0066, 333 },
    { 0x0067, 500 },
    { 0x0068, 500 },
    { 0x0069, 278 },
    { 0x006A, 278 },
    { 0x006B, 500 },
    { 0x006C, 278 },
    { 0x006D, 778 },
    { 0x006E, 500 },
    { 0x006F, 500 },
    { 0x0070, 500 },
    { 0x0071, 500 },
    { 0x0072, 333 },
    { 0x0073, 389 },
    { 0x0074, 278 },
    { 0x0075, 500 },
    { 0x0076, 500 },
    { 0x0077, 722 },
    { 0x0078, 500 },
    { 0x0079, 500 },
    { 0x007A, 444 },
    { 0x007B, 480 },
    { 0x007C, 200 },
    { 0x007D, 480 },
    { 0x007E, 541 },
    { 0x00A1, 333 },
    { 0x00A2, 500 },
    { 0x00A3, 500 },
    { 0x2044, 167 },
    { 0x00A5, 500 },
    { 0x0192, 500 },
    { 0x00A7, 500 },
    { 0x00A4, 500 },
    { 0x0027, 180 },
    { 0x201C, 444 },
    { 0x00AB, 500 },
    { 0x2039, 333 },
    { 0x203A, 333 },
    { 0xFB01, 556 },
    { 0xFB02, 556 },
    { 0x2013, 500 },
    { 0x2020, 500 },
    { 0x2021, 500 },
    { 0x00B7, 250 },
    { 0x00B6, 453 },
    { 0x2022, 350 },
    { 0x201A, 333 },
    { 0x201E, 444 },
    { 0x201D, 444 },
    { 0x00BB, 500 },
    { 0x2026, 1000 },
    { 0x2030, 1000 },
    { 0x00BF, 444 },
    { 0x0060, 333 },
    { 0x00B4, 333 },
    { 0x02C6, 333 },
    { 0x02DC, 333 },
    { 0x00AF, 333 },
    { 0x02D8, 333 },
    { 0x02D9, 333 },
    { 0x00A8, 333 },
    { 0x02DA, 333 },
    { 0x00B8, 333 },
    { 0x02DD, 333 },
    { 0x02DB, 333 },
    { 0x02C7, 333 },
    { 0x2014, 1000 },
    { 0x00C6, 889 },
    { 0x00AA, 276 },
    { 0x0141, 611 },
    { 0x00D8, 722 },
    { 0x0152, 889 },
    { 0x00BA, 310 },
    { 0x00E6, 667 },
    { 0x0131, 278 },
    { 0x0142, 278 },
    { 0x00F8, 500 },
    { 0x0153, 722 },
    { 0x00DF, 500 },
    { 0x00CF, 333 },
    { 0x00E9, 444 },
    { 0x0103, 444 },
    { 0x0171, 500 },
    { 0x011B, 444 },
    { 0x0178, 722 },
    { 0x00F7, 564 },
    { 0x00DD, 722 },
    { 0x00C2, 722 },
    { 0x00E1, 444 },
    { 0x00DB, 722 },
    { 0x00FD, 500 },
    { 0x0219, 389 },
    { 0x00EA, 444 },
    { 0x016E, 722 },
    { 0x00DC, 722 },
    { 0x0105, 444 },
    { 0x00DA, 722 },
    { 0x0173, 500 },
    { 0x00CB, 611 },
    { 0x0110, 722 },
    { 0xF6C3, 250 },
    { 0x00A9, 760 },
    { 0x0112, 611 },
    { 0x010D, 444 },
    { 0x00E5, 444 },
    { 0x0145, 722 },
    { 0x013A, 278 },
    { 0x00E0, 444 },
    { 0x0162, 611 },
    { 0x0106, 667 },
    { 0x00E3, 444 },
    { 0x0116, 611 },
    { 0x0161, 389 },
    { 0x015F, 389 },
    { 0x00ED, 278 },
    { 0x25CA, 471 },
    { 0x0158, 667 },
    { 0x0122, 722 },
    { 0x00FB, 500 },
    { 0x00E2, 444 },
    { 0x0100, 722 },
    { 0x0159, 333 },
    { 0x00E7, 444 },
    { 0x017B, 611 },
    { 0x00DE, 556 },
    { 0x014C, 722 },
    { 0x0154, 667 },
    { 0x015A, 556 },
    { 0x010F, 588 },
    { 0x016A, 722 },
    { 0x016F, 500 },
    { 0x00B3, 300 },
    { 0x00D2, 722 },
    { 0x00C0, 722 },
    { 0x0102, 722 },
    { 0x00D7, 564 },
    { 0x00FA, 500 },
    { 0x0164, 611 },
    { 0x2202, 476 },
    { 0x00FF, 500 },
    { 0x0143, 722 },
    { 0x00EE, 278 },
    { 0x00CA, 611 },
    { 0x00E4, 444 },
    { 0x00EB, 444 },
    { 0x0107, 444 },
    { 0x0144, 500 },
    { 0x016B, 500 },
    { 0x0147, 722 },
    { 0x00CD, 333 },
    { 0x00B1, 564 },
    { 0x00A6, 200 },
    { 0x00AE, 760 },
    { 0x011E, 722 },
    { 0x0130, 333 },
    { 0x2211, 600 },
    { 0x00C8, 611 },
    { 0x0155, 333 },
    { 0x014D, 500 },
    { 0x0179, 611 },
    { 0x017D, 611 },
    { 0x2265, 549 },
    { 0x00D0, 722 },
    { 0x00C7, 667 },
    { 0x013C, 278 },
    { 0x0165, 326 },
    { 0x0119, 444 },
    { 0x0172, 722 },
    { 0x00C1, 722 },
    { 0x00C4, 722 },
    { 0x00E8, 444 },
    { 0x017A, 444 },
    { 0x012F, 278 },
    { 0x00D3, 722 },
    { 0x00F3, 500 },
    { 0x0101, 444 },
    { 0x015B, 389 },
    { 0x00EF, 278 },
    { 0x00D4, 722 },
    { 0x00D9, 722 },
    { 0x0394, 612 },
    { 0x00FE, 500 },
    { 0x00B2, 300 },
    { 0x00D6, 722 },
    { 0x00B5, 500 },
    { 0x00EC, 278 },
    { 0x0151, 500 },
    { 0x0118, 611 },
    { 0x0111, 500 },
    { 0x00BE, 750 },
    { 0x015E, 556 },
    { 0x013E, 344 },
    { 0x0136, 722 },
    { 0x0139, 611 },
    { 0x2122, 980 },
    { 0x0117, 444 },
    { 0x00CC, 333 },
    { 0x012A, 333 },
    { 0x013D, 611 },
    { 0x00BD, 750 },
    { 0x2264, 549 },
    { 0x00F4, 500 },
    { 0x00F1, 500 },
    { 0x0170, 722 },
    { 0x00C9, 611 },
    { 0x0113, 444 },
    { 0x011F, 500 },
    { 0x00BC, 750 },
    { 0x0160, 556 },
    { 0x0218, 556 },
    { 0x0150, 722 },
    { 0x00B0, 400 },
    { 0x00F2, 500 },
    { 0x010C, 667 },
    { 0x00F9, 500 },
    { 0x221A, 453 },
    { 0x010E, 722 },
    { 0x0157, 333 },
    { 0x00D1, 722 },
    { 0x00F5, 500 },
    { 0x0156, 667 },
    { 0x013B, 611 },
    { 0x00C3, 722 },
    { 0x0104, 722 },
    { 0x00C5, 722 },
    { 0x00D5, 722 },
    { 0x017C, 444 },
    { 0x011A, 611 },
    { 0x012E, 333 },
    { 0x0137, 500 },
    { 0x2212, 564 },
    { 0x00CE, 333 },
    { 0x0148, 500 },
    { 0x0163, 278 },
    { 0x00AC, 564 },
    { 0x00F6, 500 },
    { 0x00FC, 500 },
    { 0x2260, 549 },
    { 0x0123, 500 },
    { 0x00F0, 500 },
    { 0x017E, 444 },
    { 0x0146, 500 },
    { 0x00B9, 300 },
    { 0x012B, 278 },
    { 0x20AC, 500 },
};

static const Standard14FontChar CHAR_DATA_TIMES_BOLD[315] = {
    { 0x0020, 250 },
    { 0x0021, 333 },
    { 0x0022, 555 },
    { 0x0023, 500 },
    { 0x0024, 500 },
    { 0x0025, 1000 },
    { 0x0026, 833 },
    { 0x2019, 333 },
    { 0x0028, 333 },
    { 0x0029, 333 },
    { 0x002A, 500 },
    { 0x002B, 570 },
    { 0x002C, 250 },
    { 0x002D, 333 },
    { 0x002E, 250 },
    { 0x002F, 278 },
    { 0x0030, 500 },
    { 0x0031, 500 },
    { 0x0032, 500 },
    { 0x0033, 500 },
    { 0x0034, 500 },
    { 0x0035, 500 },
    { 0x0036, 500 },
    { 0x0037, 500 },
    { 0x0038, 500 },
    { 0x0039, 500 },
    { 0x003A, 333 },
    { 0x003B, 333 },
    { 0x003C, 570 },
    { 0x003D, 570 },
    { 0x003E, 570 },
    { 0x003F, 500 },
    { 0x0040, 930 },
    { 0x0041, 722 },
    { 0x0042, 667 },
    { 0x0043, 722 },
    { 0x0044, 722 },
    { 0x0045, 667 },
    { 0x0046, 611 },
    { 0x0047, 778 },
    { 0x0048, 778 },
    { 0x0049, 389 },
    { 0x004A, 500 },
    { 0x004B, 778 },
    { 0x004C, 667 },
    { 0x004D, 944 },
    { 0x004E, 722 },
    { 0x004F, 778 },
    { 0x0050, 611 },
    { 0x0051, 778 },
    { 0x0052, 722 },
    { 0x0053, 556 },
    { 0x0054, 667 },
    { 0x0055, 722 },
    { 0x0056, 722 },
    { 0x0057, 1000 },
    { 0x0058, 722 },
    { 0x0059, 722 },
    { 0x005A, 667 },
    { 0x005B, 333 },
    { 0x005C, 278 },
    { 0x005D, 333 },
    { 0x005E, 581 },
    { 0x005F, 500 },
    { 0x2018, 333 },
    { 0x0061, 500 },
    { 0x0062, 556 },
    { 0x0063, 444 },
    { 0x0064, 556 },
    { 0x0065, 444 },
    { 0x0066, 333 },
    { 0x0067, 500 },
    { 0x0068, 556 },
    { 0x0069, 278 },
    { 0x006A, 333 },
    { 0x006B, 556 },
    { 0x006C, 278 },
    { 0x006D, 833 },
    { 0x006E, 556 },
    { 0x006F, 500 },
    { 0x0070, 556 },
    { 0x0071, 556 },
    { 0x0072, 444 },
    { 0x0073, 389 },
    { 0x0074, 333 },
    { 0x0075, 556 },
    { 0x0076, 500 },
    { 0x0077, 722 },
    { 0x0078, 500 },
    { 0x0079, 500 },
    { 0x007A, 444 },
    { 0x007B, 394 },
    { 0x007C, 220 },
    { 0x007D, 394 },
    { 0x007E, 520 },
    { 0x00A1, 333 },
    { 0x00A2, 500 },
    { 0x00A3, 500 },
    { 0x2044, 167 },
    { 0x00A5, 500 },
    { 0x0192, 500 },
    { 0x00A7, 500 },
    { 0x00A4, 500 },
    { 0x0027, 278 },
    { 0x201C, 500 },
    { 0x00AB, 500 },
    { 0x2039, 333 },
    { 0x203A, 333 },
    { 0xFB01, 556 },
    { 0xFB02, 556 },
    { 0x2013, 500 },
    { 0x2020, 500 },
    { 0x2021, 500 },
    { 0x00B7, 250 },
    { 0x00B6, 540 },
    { 0x2022, 350 },
    { 0x201A, 333 },
    { 0x201E, 500 },
    { 0x201D, 500 },
    { 0x00BB, 500 },
    { 0x2026, 1000 },
    { 0x2030, 1000 },
    { 0x00BF, 500 },
    { 0x0060, 333 },
    { 0x00B4, 333 },
    { 0x02C6, 333 },
    { 0x02DC, 333 },
    { 0x00AF, 333 },
    { 0x02D8, 333 },
    { 0x02D9, 333 },
    { 0x00A8, 333 },
    { 0x02DA, 333 },
    { 0x00B8, 333 },
    { 0x02DD, 333 },
    { 0x02DB, 333 },
    { 0x02C7, 333 },
    { 0x2014, 1000 },
    { 0x00C6, 1000 },
    { 0x00AA, 300 },
    { 0x0141, 667 },
    { 0x00D8, 778 },
    { 0x0152, 1000 },
    { 0x00BA, 330 },
    { 0x00E6, 722 },
    { 0x0131, 278 },
    { 0x0142, 278 },
    { 0x00F8, 500 },
    { 0x0153, 722 },
    { 0x00DF, 556 },
    { 0x00CF, 389 },
    { 0x00E9, 444 },
    { 0x0103, 500 },
    { 0x0171, 556 },
    { 0x011B, 444 },
    { 0x0178, 722 },
    { 0x00F7, 570 },
    { 0x00DD, 722 },
    { 0x00C2, 722 },
    { 0x00E1, 500 },
    { 0x00DB, 722 },
    { 0x00FD, 500 },
    { 0x0219, 389 },
    { 0x00EA, 444 },
    { 0x016E, 722 },
    { 0x00DC, 722 },
    { 0x0105, 500 },
    { 0x00DA, 722 },
    { 0x0173, 556 },
    { 0x00CB, 667 },
    { 0x0110, 722 },
    { 0xF6C3, 250 },
    { 0x00A9, 747 },
    { 0x0112, 667 },
    { 0x010D, 444 },
    { 0x00E5, 500 },
    { 0x0145, 722 },
    { 0x013A, 278 },
    { 0x00E0, 500 },
    { 0x0162, 667 },
    { 0x0106, 722 },
    { 0x00E3, 500 },
    { 0x0116, 667 },
    { 0x0161, 389 },
    { 0x015F, 389 },
    { 0x00ED, 278 },
    { 0x25CA, 494 },
    { 0x0158, 722 },
    { 0x0122, 778 },
    { 0x00FB, 556 },
    { 0x00E2, 500 },
    { 0x0100, 722 },
    { 0x0159, 444 },
    { 0x00E7, 444 },
    { 0x017B, 667 },
    { 0x00DE, 611 },
    { 0x014C, 778 },
    { 0x0154, 722 },
    { 0x015A, 556 },
    { 0x010F, 672 },
    { 0x016A, 722 },
    { 0x016F, 556 },
    { 0x00B3, 300 },
    { 0x00D2, 778 },
    { 0x00C0, 722 },
    { 0x0102, 722 },
    { 0x00D7, 570 },
    { 0x00FA, 556 },
    { 0x0164, 667 },
    { 0x2202, 494 },
    { 0x00FF, 500 },
    { 0x0143, 722 },
    { 0x00EE, 278 },
    { 0x00CA, 667 },
    { 0x00E4, 500 },
    { 0x00EB, 444 },
    { 0x0107, 444 },
    { 0x0144, 556 },
    { 0x016B, 556 },
    { 0x0147, 722 },
    { 0x00CD, 389 },
    { 0x00B1, 570 },
    { 0x00A6, 220 },
    { 0x00AE, 747 },
    { 0x011E, 778 },
    { 0x0130, 389 },
    { 0x2211, 600 },
    { 0x00C8, 667 },
    { 0x0155, 444 },
    { 0x014D, 500 },
    { 0x0179, 667 },
    { 0x017D, 667 },
    { 0x2265, 549 },
    { 0x00D0, 722 },
    { 0x00C7, 722 },
    { 0x013C, 278 },
    { 0x0165, 416 },
    { 0x0119, 444 },
    { 0x0172, 722 },
    { 0x00C1, 722 },
    { 0x00C4, 722 },
    { 0x00E8, 444 },
    { 0x017A, 444 },
    { 0x012F, 278 },
    { 0x00D3, 778 },
    { 0x00F3, 500 },
    { 0x0101, 500 },
    { 0x015B, 389 },
    { 0x00EF, 278 },
    { 0x00D4, 778 },
    { 0x00D9, 722 },
    { 0x0394, 612 },
    { 0x00FE, 556 },
    { 0x00B2, 300 },
    { 0x00D6, 778 },
    { 0x00B5, 556 },
    { 0x00EC, 278 },
    { 0x0151, 500 },
    { 0x0118, 667 },
    { 0x0111, 556 },
    { 0x00BE, 750 },
    { 0x015E, 556 },
    { 0x013E, 394 },
    { 0x0136, 778 },
    { 0x0139, 667 },
    { 0x2122, 1000 },
    { 0x0117, 444 },
    { 0x00CC, 389 },
    { 0x012A, 389 },
    { 0x013D, 667 },
    { 0x00BD, 750 },
    { 0x2264, 549 },
    { 0x00F4, 500 },
    { 0x00F1, 556 },
    { 0x0170, 722 },
    { 0x00C9, 667 },
    { 0x0113, 444 },
    { 0x011F, 500 },
    { 0x00BC, 750 },
    { 0x0160, 556 },
    { 0x0218, 556 },
    { 0x0150, 778 },
    { 0x00B0, 400 },
    { 0x00F2, 500 },
    { 0x010C, 722 },
    { 0x00F9, 556 },
    { 0x221A, 549 },
    { 0x010E, 722 },
    { 0x0157, 444 },
    { 0x00D1, 722 },
    { 0x00F5, 500 },
    { 0x0156, 722 },
    { 0x013B, 667 },
    { 0x00C3, 722 },
    { 0x0104, 722 },
    { 0x00C5, 722 },
    { 0x00D5, 778 },
    { 0x017C, 444 },
    { 0x011A, 667 },
    { 0x012E, 389 },
    { 0x0137, 556 },
    { 0x2212, 570 },
    { 0x00CE, 389 },
    { 0x0148, 556 },
    { 0x0163, 333 },
    { 0x00AC, 570 },
    { 0x00F6, 500 },
    { 0x00FC, 556 },
    { 0x2260, 549 },
    { 0x0123, 500 },
    { 0x00F0, 500 },
    { 0x017E, 444 },
    { 0x0146, 556 },
    { 0x00B9, 300 },
    { 0x012B, 278 },
    { 0x20AC, 500 },
};

static const Standard14FontChar CHAR_DATA_TIMES_BOLD_ITALIC[315] = {
    { 0x0020, 250 },
    { 0x0021, 389 },
    { 0x0022, 555 },
    { 0x0023, 500 },
    { 0x0024, 500 },
    { 0x0025, 833 },
    { 0x0026, 778 },
    { 0x2019, 333 },
    { 0x0028, 333 },
    { 0x0029, 333 },
    { 0x002A, 500 },
    { 0x002B, 570 },
    { 0x002C, 250 },
    { 0x002D, 333 },
    { 0x002E, 250 },
    { 0x002F, 278 },
    { 0x0030, 500 },
    { 0x0031, 500 },
    { 0x0032, 500 },
    { 0x0033, 500 },
    { 0x0034, 500 },
    { 0x0035, 500 },
    { 0x0036, 500 },
    { 0x0037, 500 },
    { 0x0038, 500 },
    { 0x0039, 500 },
    { 0x003A, 333 },
    { 0x003B, 333 },
    { 0x003C, 570 },
    { 0x003D, 570 },
    { 0x003E, 570 },
    { 0x003F, 500 },
    { 0x0040, 832 },
    { 0x0041, 667 },
    { 0x0042, 667 },
    { 0x0043, 667 },
    { 0x0044, 722 },
    { 0x0045, 667 },
    { 0x0046, 667 },
    { 0x0047, 722 },
    { 0x0048, 778 },
    { 0x0049, 389 },
    { 0x004A, 500 },
    { 0x004B, 667 },
    { 0x004C, 611 },
    { 0x004D, 889 },
    { 0x004E, 722 },
    { 0x004F, 722 },
    { 0x0050, 611 },
    { 0x0051, 722 },
    { 0x0052, 667 },
    { 0x0053, 556 },
    { 0x0054, 611 },
    { 0x0055, 722 },
    { 0x0056, 667 },
    { 0x0057, 889 },
    { 0x0058, 667 },
    { 0x0059, 611 },
    { 0x005A, 611 },
    { 0x005B, 333 },
    { 0x005C, 278 },
    { 0x005D, 333 },
    { 0x005E, 570 },
    { 0x005F, 500 },
    { 0x2018, 333 },
    { 0x0061, 500 },
    { 0x0062, 500 },
    { 0x0063, 444 },
    { 0x0064, 500 },
    { 0x0065, 444 },
    { 0x0066, 333 },
    { 0x0067, 500 },
    { 0x0068, 556 },
    { 0x0069, 278 },
    { 0x006A, 278 },
    { 0x006B, 500 },
    { 0x006C, 278 },
    { 0x006D, 778 },
    { 0x006E, 556 },
    { 0x006F, 500 },
    { 0x0070, 500 },
    { 0x0071, 500 },
    { 0x0072, 389 },
    { 0x0073, 389 },
    { 0x0074, 278 },
    { 0x0075, 556 },
    { 0x0076, 444 },
    { 0x0077, 667 },
    { 0x0078, 500 },
    { 0x0079, 444 },
    { 0x007A, 389 },
    { 0x007B, 348 },
    { 0x007C, 220 },
    { 0x007D, 348 },
    { 0x007E, 570 },
    { 0x00A1, 389 },
    { 0x00A2, 500 },
    { 0x00A3, 500 },
    { 0x2044, 167 },
    { 0x00A5, 500 },
    { 0x0192, 500 },
    { 0x00A7, 500 },
    { 0x00A4, 500 },
    { 0x0027, 278 },
    { 0x201C, 500 },
    { 0x00AB, 500 },
    { 0x2039, 333 },
    { 0x203A, 333 },
    { 0xFB01, 556 },
    { 0xFB02, 556 },
    { 0x2013, 500 },
    { 0x2020, 500 },
    { 0x2021, 500 },
    { 0x00B7, 250 },
    { 0x00B6, 500 },
    { 0x2022, 350 },
    { 0x201A, 333 },
    { 0x201E, 500 },
    { 0x201D, 500 },
    { 0x00BB, 500 },
    { 0x2026, 1000 },
    { 0x2030, 1000 },
    { 0x00BF, 500 },
    { 0x0060, 333 },
    { 0x00B4, 333 },
    { 0x02C6, 333 },
    { 0x02DC, 333 },
    { 0x00AF, 333 },
    { 0x02D8, 333 },
    { 0x02D9, 333 },
    { 0x00A8, 333 },
    { 0x02DA, 333 },
    { 0x00B8, 333 },
    { 0x02DD, 333 },
    { 0x02DB, 333 },
    { 0x02C7, 333 },
    { 0x2014, 1000 },
    { 0x00C6, 944 },
    { 0x00AA, 266 },
    { 0x0141, 611 },
    { 0x00D8, 722 },
    { 0x0152, 944 },
    { 0x00BA, 300 },
    { 0x00E6, 722 },
    { 0x0131, 278 },
    { 0x0142, 278 },
    { 0x00F8, 500 },
    { 0x0153, 722 },
    { 0x00DF, 500 },
    { 0x00CF, 389 },
    { 0x00E9, 444 },
    { 0x0103, 500 },
    { 0x0171, 556 },
    { 0x011B, 444 },
    { 0x0178, 611 },
    { 0x00F7, 570 },
    { 0x00DD, 611 },
    { 0x00C2, 667 },
    { 0x00E1, 500 },
    { 0x00DB, 722 },
    { 0x00FD, 444 },
    { 0x0219, 389 },
    { 0x00EA, 444 },
    { 0x016E, 722 },
    { 0x00DC, 722 },
    { 0x0105, 500 },
    { 0x00DA, 722 },
    { 0x0173, 556 },
    { 0x00CB, 667 },
    { 0x0110, 722 },
    { 0xF6C3, 250 },
    { 0x00A9, 747 },
    { 0x0112, 667 },
    { 0x010D, 444 },
    { 0x00E5, 500 },
    { 0x0145, 722 },
    { 0x013A, 278 },
    { 0x00E0, 500 },
    { 0x0162, 611 },
    { 0x0106, 667 },
    { 0x00E3, 500 },
    { 0x0116, 667 },
    { 0x0161, 389 },
    { 0x015F, 389 },
    { 0x00ED, 278 },
    { 0x25CA, 494 },
    { 0x0158, 667 },
    { 0x0122, 722 },
    { 0x00FB, 556 },
    { 0x00E2, 500 },
    { 0x0100, 667 },
    { 0x0159, 389 },
    { 0x00E7, 444 },
    { 0x017B, 611 },
    { 0x00DE, 611 },
    { 0x014C, 722 },
    { 0x0154, 667 },
    { 0x015A, 556 },
    { 0x010F, 608 },
    { 0x016A, 722 },
    { 0x016F, 556 },
    { 0x00B3, 300 },
    { 0x00D2, 722 },
    { 0x00C0, 667 },
    { 0x0102, 667 },
    { 0x00D7, 570 },
    { 0x00FA, 556 },
    { 0x0164, 611 },
    { 0x2202, 494 },
    { 0x00FF, 444 },
    { 0x0143, 722 },
    { 0x00EE, 278 },
    { 0x00CA, 667 },
    { 0x00E4, 500 },
    { 0x00EB, 444 },
    { 0x0107, 444 },
    { 0x0144, 556 },
    { 0x016B, 556 },
    { 0x0147, 722 },
    { 0x00CD, 389 },
    { 0x00B1, 570 },
    { 0x00A6, 220 },
    { 0x00AE, 747 },
    { 0x011E, 722 },
    { 0x0130, 389 },
    { 0x2211, 600 },
    { 0x00C8, 667 },
    { 0x0155, 389 },
    { 0x014D, 500 },
    { 0x0179, 611 },
    { 0x017D, 611 },
    { 0x2265, 549 },
    { 0x00D0, 722 },
    { 0x00C7, 667 },
    { 0x013C, 278 },
    { 0x0165, 366 },
    { 0x0119, 444 },
    { 0x0172, 722 },
    { 0x00C1, 667 },
    { 0x00C4, 667 },
    { 0x00E8, 444 },
    { 0x017A, 389 },
    { 0x012F, 278 },
    { 0x00D3, 722 },
    { 0x00F3, 500 },
    { 0x0101, 500 },
    { 0x015B, 389 },
    { 0x00EF, 278 },
    { 0x00D4, 722 },
    { 0x00D9, 722 },
    { 0x0394, 612 },
    { 0x00FE, 500 },
    { 0x00B2, 300 },
    { 0x00D6, 722 },
    { 0x00B5, 576 },
    { 0x00EC, 278 },
    { 0x0151, 500 },
    { 0x0118, 667 },
    { 0x0111, 500 },
    { 0x00BE, 750 },
    { 0x015E, 556 },
    { 0x013E, 382 },
    { 0x0136, 667 },
    { 0x0139, 611 },
    { 0x2122, 1000 },
    { 0x0117, 444 },
    { 0x00CC, 389 },
    { 0x012A, 389 },
    { 0x013D, 611 },
    { 0x00BD, 750 },
    { 0x2264, 549 },
    { 0x00F4, 500 },
    { 0x00F1, 556 },
    { 0x0170, 722 },
    { 0x00C9, 667 },
    { 0x0113, 444 },
    { 0x011F, 500 },
    { 0x00BC, 750 },
    { 0x0160, 556 },
    { 0x0218, 556 },
    { 0x0150, 722 },
    { 0x00B0, 400 },
    { 0x00F2, 500 },
    { 0x010C, 667 },
    { 0x00F9, 556 },
    { 0x221A, 549 },
    { 0x010E, 722 },
    { 0x0157, 389 },
    { 0x00D1, 722 },
    { 0x00F5, 500 },
    { 0x0156, 667 },
    { 0x013B, 611 },
    { 0x00C3, 667 },
    { 0x0104, 667 },
    { 0x00C5, 667 },
    { 0x00D5, 722 },
    { 0x017C, 389 },
    { 0x011A, 667 },
    { 0x012E, 389 },
    { 0x0137, 500 },
    { 0x2212, 606 },
    { 0x00CE, 389 },
    { 0x0148, 556 },
    { 0x0163, 278 },
    { 0x00AC, 606 },
    { 0x00F6, 500 },
    { 0x00FC, 556 },
    { 0x2260, 549 },
    { 0x0123, 500 },
    { 0x00F0, 500 },
    { 0x017E, 389 },
    { 0x0146, 556 },
    { 0x00B9, 300 },
    { 0x012B, 278 },
    { 0x20AC, 500 },
};

static const Standard14FontChar CHAR_DATA_TIMES_ITALIC[315] = {
    { 0x0020, 250 },
    { 0x0021, 333 },
    { 0x0022, 420 },
    { 0x0023, 500 },
    { 0x0024, 500 },
    { 0x0025, 833 },
    { 0x0026, 778 },
    { 0x2019, 333 },
    { 0x0028, 333 },
    { 0x0029, 333 },
    { 0x002A, 500 },
    { 0x002B, 675 },
    { 0x002C, 250 },
    { 0x002D, 333 },
    { 0x002E, 250 },
    { 0x002F, 278 },
    { 0x0030, 500 },
    { 0x0031, 500 },
    { 0x0032, 500 },
    { 0x0033, 500 },
    { 0x0034, 500 },
    { 0x0035, 500 },
    { 0x0036, 500 },
    { 0x0037, 500 },
    { 0x0038, 500 },
    { 0x0039, 500 },
    { 0x003A, 333 },
    { 0x003B, 333 },
    { 0x003C, 675 },
    { 0x003D, 675 },
    { 0x003E, 675 },
    { 0x003F, 500 },
    { 0x0040, 920 },
    { 0x0041, 611 },
    { 0x0042, 611 },
    { 0x0043, 667 },
    { 0x0044, 722 },
    { 0x0045, 611 },
    { 0x0046, 611 },
    { 0x0047, 722 },
    { 0x0048, 722 },
    { 0x0049, 333 },
    { 0x004A, 444 },
    { 0x004B, 667 },
    { 0x004C, 556 },
    { 0x004D, 833 },
    { 0x004E, 667 },
    { 0x004F, 722 },
    { 0x0050, 611 },
    { 0x0051, 722 },
    { 0x0052, 611 },
    { 0x0053, 500 },
    { 0x0054, 556 },
    { 0x0055, 722 },
    { 0x0056, 611 },
    { 0x0057, 833 },
    { 0x0058, 611 },
    { 0x0059, 556 },
    { 0x005A, 556 },
    { 0x005B, 389 },
    { 0x005C, 278 },
    { 0x005D, 389 },
    { 0x005E, 422 },
    { 0x005F, 500 },
    { 0x2018, 333 },
    { 0x0061, 500 },
    { 0x0062, 500 },
    { 0x0063, 444 },
    { 0x0064, 500 },
    { 0x0065, 444 },
    { 0x0066, 278 },
    { 0x0067, 500 },
    { 0x0068, 500 },
    { 0x0069, 278 },
    { 0x006A, 278 },
    { 0x006B, 444 },
    { 0x006C, 278 },
    { 0x006D, 722 },
    { 0x006E, 500 },
    { 0x006F, 500 },
    { 0x0070, 500 },
    { 0x0071, 500 },
    { 0x0072, 389 },
    { 0x0073, 389 },
    { 0x0074, 278 },
    { 0x0075, 500 },
    { 0x0076, 444 },
    { 0x0077, 667 },
    { 0x0078, 444 },
    { 0x0079, 444 },
    { 0x007A, 389 },
    { 0x007B, 400 },
    { 0x007C, 275 },
    { 0x007D, 400 },
    { 0x007E, 541 },
    { 0x00A1, 389 },
    { 0x00A2, 500 },
    { 0x00A3, 500 },
    { 0x2044, 167 },
    { 0x00A5, 500 },
    { 0x0192, 500 },
    { 0x00A7, 500 },
    { 0x00A4, 500 },
    { 0x0027, 214 },
    { 0x201C, 556 },
    { 0x00AB, 500 },
    { 0x2039, 333 },
    { 0x203A, 333 },
    { 0xFB01, 500 },
    { 0xFB02, 500 },
    { 0x2013, 500 },
    { 0x2020, 500 },
    { 0x2021, 500 },
    { 0x00B7, 250 },
    { 0x00B6, 523 },
    { 0x2022, 350 },
    { 0x201A, 333 },
    { 0x201E, 556 },
    { 0x201D, 556 },
    { 0x00BB, 500 },
    { 0x2026, 889 },
    { 0x2030, 1000 },
    { 0x00BF, 500 },
    { 0x0060, 333 },
    { 0x00B4, 333 },
    { 0x02C6, 333 },
    { 0x02DC, 333 },
    { 0x00AF, 333 },
    { 0x02D8, 333 },
    { 0x02D9, 333 },
    { 0x00A8, 333 },
    { 0x02DA, 333 },
    { 0x00B8, 333 },
    { 0x02DD, 333 },
    { 0x02DB, 333 },
    { 0x02C7, 333 },
    { 0x2014, 889 },
    { 0x00C6, 889 },
    { 0x00AA, 276 },
    { 0x0141, 556 },
    { 0x00D8, 722 },
    { 0x0152, 944 },
    { 0x00BA, 310 },
    { 0x00E6, 667 },
    { 0x0131, 278 },
    { 0x0142, 278 },
    { 0x00F8, 500 },
    { 0x0153, 667 },
    { 0x00DF, 500 },
    { 0x00CF, 333 },
    { 0x00E9, 444 },
    { 0x0103, 500 },
    { 0x0171, 500 },
    { 0x011B, 444 },
    { 0x0178, 556 },
    { 0x00F7, 675 },
    { 0x00DD, 556 },
    { 0x00C2, 611 },
    { 0x00E1, 500 },
    { 0x00DB, 722 },
    { 0x00FD, 444 },
    { 0x0219, 389 },
    { 0x00EA, 444 },
    { 0x016E, 722 },
    { 0x00DC, 722 },
    { 0x0105, 500 },
    { 0x00DA, 722 },
    { 0x0173, 500 },
    { 0x00CB, 611 },
    { 0x0110, 722 },
    { 0xF6C3, 250 },
    { 0x00A9, 760 },
    { 0x0112, 611 },
    { 0x010D, 444 },
    { 0x00E5, 500 },
    { 0x0145, 667 },
    { 0x013A, 278 },
    { 0x00E0, 500 },
    { 0x0162, 556 },
    { 0x0106, 667 },
    { 0x00E3, 500 },
    { 0x0116, 611 },
    { 0x0161, 389 },
    { 0x015F, 389 },
    { 0x00ED, 278 },
    { 0x25CA, 471 },
    { 0x0158, 611 },
    { 0x0122, 722 },
    { 0x00FB, 500 },
    { 0x00E2, 500 },
    { 0x0100, 611 },
    { 0x0159, 389 },
    { 0x00E7, 444 },
    { 0x017B, 556 },
    { 0x00DE, 611 },
    { 0x014C, 722 },
    { 0x0154, 611 },
    { 0x015A, 500 },
    { 0x010F, 544 },
    { 0x016A, 722 },
    { 0x016F, 500 },
    { 0x00B3, 300 },
    { 0x00D2, 722 },
    { 0x00C0, 611 },
    { 0x0102, 611 },
    { 0x00D7, 675 },
    { 0x00FA, 500 },
    { 0x0164, 556 },
    { 0x2202, 476 },
    { 0x00FF, 444 },
    { 0x0143, 667 },
    { 0x00EE, 278 },
    { 0x00CA, 611 },
    { 0x00E4, 500 },
    { 0x00EB, 444 },
    { 0x0107, 444 },
    { 0x0144, 500 },
    { 0x016B, 500 },
    { 0x0147, 667 },
    { 0x00CD, 333 },
    { 0x00B1, 675 },
    { 0x00A6, 275 },
    { 0x00AE, 760 },
    { 0x011E, 722 },
    { 0x0130, 333 },
    { 0x2211, 600 },
    { 0x00C8, 611 },
    { 0x0155, 389 },
    { 0x014D, 500 },
    { 0x0179, 556 },
    { 0x017D, 556 },
    { 0x2265, 549 },
    { 0x00D0, 722 },
    { 0x00C7, 667 },
    { 0x013C, 278 },
    { 0x0165, 300 },
    { 0x0119, 444 },
    { 0x0172, 722 },
    { 0x00C1, 611 },
    { 0x00C4, 611 },
    { 0x00E8, 444 },
    { 0x017A, 389 },
    { 0x012F, 278 },
    { 0x00D3, 722 },
    { 0x00F3, 500 },
    { 0x0101, 500 },
    { 0x015B, 389 },
    { 0x00EF, 278 },
    { 0x00D4, 722 },
    { 0x00D9, 722 },
    { 0x0394, 612 },
    { 0x00FE, 500 },
    { 0x00B2, 300 },
    { 0x00D6, 722 },
    { 0x00B5, 500 },
    { 0x00EC, 278 },
    { 0x0151, 500 },
    { 0x0118, 611 },
    { 0x0111, 500 },
    { 0x00BE, 750 },
    { 0x015E, 500 },
    { 0x013E, 300 },
    { 0x0136, 667 },
    { 0x0139, 556 },
    { 0x2122, 980 },
    { 0x0117, 444 },
    { 0x00CC, 333 },
    { 0x012A, 333 },
    { 0x013D, 611 },
    { 0x00BD, 750 },
    { 0x2264, 549 },
    { 0x00F4, 500 },
    { 0x00F1, 500 },
    { 0x0170, 722 },
    { 0x00C9, 611 },
    { 0x0113, 444 },
    { 0x011F, 500 },
    { 0x00BC, 750 },
    { 0x0160, 500 },
    { 0x0218, 500 },
    { 0x0150, 722 },
    { 0x00B0, 400 },
    { 0x00F2, 500 },
    { 0x010C, 667 },
    { 0x00F9, 500 },
    { 0x221A, 453 },
    { 0x010E, 722 },
    { 0x0157, 389 },
    { 0x00D1, 667 },
    { 0x00F5, 500 },
    { 0x0156, 611 },
    { 0x013B, 556 },
    { 0x00C3, 611 },
    { 0x0104, 611 },
    { 0x00C5, 611 },
    { 0x00D5, 722 },
    { 0x017C, 389 },
    { 0x011A, 611 },
    { 0x012E, 333 },
    { 0x0137, 444 },
    { 0x2212, 675 },
    { 0x00CE, 333 },
    { 0x0148, 500 },
    { 0x0163, 278 },
    { 0x00AC, 675 },
    { 0x00F6, 500 },
    { 0x00FC, 500 },
    { 0x2260, 549 },
    { 0x0123, 500 },
    { 0x00F0, 500 },
    { 0x017E, 389 },
    { 0x0146, 500 },
    { 0x00B9, 300 },
    { 0x012B, 278 },
    { 0x20AC, 500 },
};

static const Standard14FontChar CHAR_DATA_ZAPF_DINGBATS[202] = {
    { 0x0020, 278 },
    { 0x0021, 974 },
    { 0x0022, 961 },
    { 0x0023, 974 },
    { 0x0024, 980 },
    { 0x0025, 719 },
    { 0x0026, 789 },
    { 0x0027, 790 },
    { 0x0028, 791 },
    { 0x0029, 690 },
    { 0x002A, 960 },
    { 0x002B, 939 },
    { 0x002C, 549 },
    { 0x002D, 855 },
    { 0x002E, 911 },
    { 0x002F, 933 },
    { 0x0030, 911 },
    { 0x0031, 945 },
    { 0x0032, 974 },
    { 0x0033, 755 },
    { 0x0034, 846 },
    { 0x0035, 762 },
    { 0x0036, 761 },
    { 0x0037, 571 },
    { 0x0038, 677 },
    { 0x0039, 763 },
    { 0x003A, 760 },
    { 0x003B, 759 },
    { 0x003C, 754 },
    { 0x003D, 494 },
    { 0x003E, 552 },
    { 0x003F, 537 },
    { 0x0040, 577 },
    { 0x0041, 692 },
    { 0x0042, 786 },
    { 0x0043, 788 },
    { 0x0044, 788 },
    { 0x0045, 790 },
    { 0x0046, 793 },
    { 0x0047, 794 },
    { 0x0048, 816 },
    { 0x0049, 823 },
    { 0x004A, 789 },
    { 0x004B, 841 },
    { 0x004C, 823 },
    { 0x004D, 833 },
    { 0x004E, 816 },
    { 0x004F, 831 },
    { 0x0050, 923 },
    { 0x0051, 744 },
    { 0x0052, 723 },
    { 0x0053, 749 },
    { 0x0054, 790 },
    { 0x0055, 792 },
    { 0x0056, 695 },
    { 0x0057, 776 },
    { 0x0058, 768 },
    { 0x0059, 792 },
    { 0x005A, 759 },
    { 0x005B, 707 },
    { 0x005C, 708 },
    { 0x005D, 682 },
    { 0x005E, 701 },
    { 0x005F, 826 },
    { 0x0060, 815 },
    { 0x0061, 789 },
    { 0x0062, 789 },
    { 0x0063, 707 },
    { 0x0064, 687 },
    { 0x0065, 696 },
    { 0x0066, 689 },
    { 0x0067, 786 },
    { 0x0068, 787 },
    { 0x0069, 713 },
    { 0x006A, 791 },
    { 0x006B, 785 },
    { 0x006C, 791 },
    { 0x006D, 873 },
    { 0x006E, 761 },
    { 0x006F, 762 },
    { 0x0070, 762 },
    { 0x0071, 759 },
    { 0x0072, 759 },
    { 0x0073, 892 },
    { 0x0074, 892 },
    { 0x0075, 788 },
    { 0x0076, 784 },
    { 0x0077, 438 },
    { 0x0078, 138 },
    { 0x0079, 277 },
    { 0x007A, 415 },
    { 0x007B, 392 },
    { 0x007C, 392 },
    { 0x007D, 668 },
    { 0x007E, 668 },
    { 0x0080, 390 },
    { 0x0081, 390 },
    { 0x0082, 317 },
    { 0x0083, 317 },
    { 0x0084, 276 },
    { 0x0085, 276 },
    { 0x0086, 509 },
    { 0x0087, 509 },
    { 0x0088, 410 },
    { 0x0089, 410 },
    { 0x008A, 234 },
    { 0x008B, 234 },
    { 0x008C, 334 },
    { 0x008D, 334 },
    { 0x00A1, 732 },
    { 0x00A2, 544 },
    { 0x00A3, 544 },
    { 0x00A4, 910 },
    { 0x00A5, 667 },
    { 0x00A6, 760 },
    { 0x00A7, 760 },
    { 0x00A8, 776 },
    { 0x00A9, 595 },
    { 0x00AA, 694 },
    { 0x00AB, 626 },
    { 0x00AC, 788 },
    { 0x00AD, 788 },
    { 0x00AE, 788 },
    { 0x00AF, 788 },
    { 0x00B0, 788 },
    { 0x00B1, 788 },
    { 0x00B2, 788 },
    { 0x00B3, 788 },
    { 0x00B4, 788 },
    { 0x00B5, 788 },
    { 0x00B6, 788 },
    { 0x00B7, 788 },
    { 0x00B8, 788 },
    { 0x00B9, 788 },
    { 0x00BA, 788 },
    { 0x00BB, 788 },
    { 0x00BC, 788 },
    { 0x00BD, 788 },
    { 0x00BE, 788 },
    { 0x00BF, 788 },
    { 0x00C0, 788 },
    { 0x00C1, 788 },
    { 0x00C2, 788 },
    { 0x00C3, 788 },
    { 0x00C4, 788 },
    { 0x00C5, 788 },
    { 0x00C6, 788 },
    { 0x00C7, 788 },
    { 0x00C8, 788 },
    { 0x00C9, 788 },
    { 0x00CA, 788 },
    { 0x00CB, 788 },
    { 0x00CC, 788 },
    { 0x00CD, 788 },
    { 0x00CE, 788 },
    { 0x00CF, 788 },
    { 0x00D0, 788 },
    { 0x00D1, 788 },
    { 0x00D2, 788 },
    { 0x00D3, 788 },
    { 0x00D4, 894 },
    { 0x00D5, 838 },
    { 0x00D6, 1016 },
    { 0x00D7, 458 },
    { 0x00D8, 748 },
    { 0x00D9, 924 },
    { 0x00DA, 748 },
    { 0x00DB, 918 },
    { 0x00DC, 927 },
    { 0x00DD, 928 },
    { 0x00DE, 928 },
    { 0x00DF, 834 },
    { 0x00E0, 873 },
    { 0x00E1, 828 },
    { 0x00E2, 924 },
    { 0x00E3, 924 },
    { 0x00E4, 917 },
    { 0x00E5, 930 },
    { 0x00E6, 931 },
    { 0x00E7, 463 },
    { 0x00E8, 883 },
    { 0x00E9, 836 },
    { 0x00EA, 836 },
    { 0x00EB, 867 },
    { 0x00EC, 867 },
    { 0x00ED, 696 },
    { 0x00EE, 696 },
    { 0x00EF, 874 },
    { 0x00F1, 874 },
    { 0x00F2, 760 },
    { 0x00F3, 946 },
    { 0x00F4, 771 },
    { 0x00F5, 865 },
    { 0x00F6, 771 },
    { 0x00F7, 888 },
    { 0x00F8, 967 },
    { 0x00F9, 888 },
    { 0x00FA, 831 },
    { 0x00FB, 873 },
    { 0x00FC, 927 },
    { 0x00FD, 970 },
    { 0x00FE, 918 },
};

static const Standard14FontChar CHAR_DATA_SYMBOL[190] = {
    { 0x0020, 250 },
    { 0x0021, 333 },
    { 0x0022, 713 },
    { 0x0023, 500 },
    { 0x0024, 549 },
    { 0x0025, 833 },
    { 0x0026, 778 },
    { 0x0027, 439 },
    { 0x0028, 333 },
    { 0x0029, 333 },
    { 0x002A, 500 },
    { 0x002B, 549 },
    { 0x002C, 250 },
    { 0x002D, 549 },
    { 0x002E, 250 },
    { 0x002F, 278 },
    { 0x0030, 500 },
    { 0x0031, 500 },
    { 0x0032, 500 },
    { 0x0033, 500 },
    { 0x0034, 500 },
    { 0x0035, 500 },
    { 0x0036, 500 },
    { 0x0037, 500 },
    { 0x0038, 500 },
    { 0x0039, 500 },
    { 0x003A, 278 },
    { 0x003B, 278 },
    { 0x003C, 549 },
    { 0x003D, 549 },
    { 0x003E, 549 },
    { 0x003F, 444 },
    { 0x0040, 549 },
    { 0x0041, 722 },
    { 0x0042, 667 },
    { 0x0043, 722 },
    { 0x0044, 612 },
    { 0x0045, 611 },
    { 0x0046, 763 },
    { 0x0047, 603 },
    { 0x0048, 722 },
    { 0x0049, 333 },
    { 0x004A, 631 },
    { 0x004B, 722 },
    { 0x004C, 686 },
    { 0x004D, 889 },
    { 0x004E, 722 },
    { 0x004F, 722 },
    { 0x0050, 768 },
    { 0x0051, 741 },
    { 0x0052, 556 },
    { 0x0053, 592 },
    { 0x0054, 611 },
    { 0x0055, 690 },
    { 0x0056, 439 },
    { 0x0057, 768 },
    { 0x0058, 645 },
    { 0x0059, 795 },
    { 0x005A, 611 },
    { 0x005B, 333 },
    { 0x005C, 863 },
    { 0x005D, 333 },
    { 0x005E, 658 },
    { 0x005F, 500 },
    { 0x0060, 500 },
    { 0x0061, 631 },
    { 0x0062, 549 },
    { 0x0063, 549 },
    { 0x0064, 494 },
    { 0x0065, 439 },
    { 0x0066, 521 },
    { 0x0067, 411 },
    { 0x0068, 603 },
    { 0x0069, 329 },
    { 0x006A, 603 },
    { 0x006B, 549 },
    { 0x006C, 549 },
    { 0x006D, 576 },
    { 0x006E, 521 },
    { 0x006F, 549 },
    { 0x0070, 549 },
    { 0x0071, 521 },
    { 0x0072, 549 },
    { 0x0073, 603 },
    { 0x0074, 439 },
    { 0x0075, 576 },
    { 0x0076, 713 },
    { 0x0077, 686 },
    { 0x0078, 493 },
    { 0x0079, 686 },
    { 0x007A, 494 },
    { 0x007B, 480 },
    { 0x007C, 200 },
    { 0x007D, 480 },
    { 0x007E, 549 },
    { 0x00A0, 750 },
    { 0x00A1, 620 },
    { 0x00A2, 247 },
    { 0x00A3, 549 },
    { 0x00A4, 167 },
    { 0x00A5, 713 },
    { 0x00A6, 500 },
    { 0x00A7, 753 },
    { 0x00A8, 753 },
    { 0x00A9, 753 },
    { 0x00AA, 753 },
    { 0x00AB, 1042 },
    { 0x00AC, 987 },
    { 0x00AD, 603 },
    { 0x00AE, 987 },
    { 0x00AF, 603 },
    { 0x00B0, 400 },
    { 0x00B1, 549 },
    { 0x00B2, 411 },
    { 0x00B3, 549 },
    { 0x00B4, 549 },
    { 0x00B5, 713 },
    { 0x00B6, 494 },
    { 0x00B7, 460 },
    { 0x00B8, 549 },
    { 0x00B9, 549 },
    { 0x00BA, 549 },
    { 0x00BB, 549 },
    { 0x00BC, 1000 },
    { 0x00BD, 603 },
    { 0x00BE, 1000 },
    { 0x00BF, 658 },
    { 0x00C0, 823 },
    { 0x00C1, 686 },
    { 0x00C2, 795 },
    { 0x00C3, 987 },
    { 0x00C4, 768 },
    { 0x00C5, 768 },
    { 0x00C6, 823 },
    { 0x00C7, 768 },
    { 0x00C8, 768 },
    { 0x00C9, 713 },
    { 0x00CA, 713 },
    { 0x00CB, 713 },
    { 0x00CC, 713 },
    { 0x00CD, 713 },
    { 0x00CE, 713 },
    { 0x00CF, 713 },
    { 0x00D0, 768 },
    { 0x00D1, 713 },
    { 0x00D2, 790 },
    { 0x00D3, 790 },
    { 0x00D4, 890 },
    { 0x00D5, 823 },
    { 0x00D6, 549 },
    { 0x00D7, 250 },
    { 0x00D8, 713 },
    { 0x00D9, 603 },
    { 0x00DA, 603 },
    { 0x00DB, 1042 },
    { 0x00DC, 987 },
    { 0x00DD, 603 },
    { 0x00DE, 987 },
    { 0x00DF, 603 },
    { 0x00E0, 494 },
    { 0x00E1, 329 },
    { 0x00E2, 790 },
    { 0x00E3, 790 },
    { 0x00E4, 786 },
    { 0x00E5, 713 },
    { 0x00E6, 384 },
    { 0x00E7, 384 },
    { 0x00E8, 384 },
    { 0x00E9, 384 },
    { 0x00EA, 384 },
    { 0x00EB, 384 },
    { 0x00EC, 494 },
    { 0x00ED, 494 },
    { 0x00EE, 494 },
    { 0x00EF, 494 },
    { 0x00F1, 329 },
    { 0x00F2, 274 },
    { 0x00F3, 686 },
    { 0x00F4, 686 },
    { 0x00F5, 686 },
    { 0x00F6, 384 },
    { 0x00F7, 384 },
    { 0x00F8, 384 },
    { 0x00F9, 384 },
    { 0x00FA, 384 },
    { 0x00FB, 384 },
    { 0x00FC, 494 },
    { 0x00FD, 494 },
    { 0x00FE, 494 },
    { 0xFFFF, 790 }, // The last glyph of Symbol font is "apple"
                     // which has no unique corrispective in Unicode
                     // Just map it to the undefined character 0xFFFF
};

Std14CPToGIDMapImp::Std14CPToGIDMapImp(PdfStandard14FontType stdFont)
{
    unsigned size;
    auto data = GetStd14FontChars(stdFont, size);
    for (unsigned short i = 0; i < size; i++)
        Map[data[i].CodePoint] = i;
}

string_view mm::GetStandard14FontName(PdfStandard14FontType stdFont)
{
    switch (stdFont)
    {
        case PdfStandard14FontType::TimesRoman:
            return FONT_TIMES_ROMAN_STD;
        case PdfStandard14FontType::TimesItalic:
            return FONT_TIMES_ITALIC_STD;
        case PdfStandard14FontType::TimesBold:
            return FONT_TIMES_BOLD_STD;
        case PdfStandard14FontType::TimesBoldItalic:
            return FONT_TIMES_BOLD_ITALIC_STD;
        case PdfStandard14FontType::Helvetica:
            return FONT_HELVETICA_STD;
        case PdfStandard14FontType::HelveticaOblique:
            return FONT_HELVETICA_OBLIQUE_STD;
        case PdfStandard14FontType::HelveticaBold:
            return FONT_HELVETICA_BOLD_STD;
        case PdfStandard14FontType::HelveticaBoldOblique:
            return FONT_HELVETICA_BOLD_OBLIQUE_STD;
        case PdfStandard14FontType::Courier:
            return FONT_COURIER_STD;
        case PdfStandard14FontType::CourierOblique:
            return FONT_COURIER_OBLIQUE_STD;
        case PdfStandard14FontType::CourierBold:
            return FONT_COURIER_BOLD_STD;
        case PdfStandard14FontType::CourierBoldOblique:
            return FONT_COURIER_BOLD_OBLIQUE_STD;
        case PdfStandard14FontType::Symbol:
            return FONT_SYMBOL_STD;
        case PdfStandard14FontType::ZapfDingbats:
            return FONT_ZAPF_DINGBATS_STD;
        case PdfStandard14FontType::Unknown:
        default:
            PDFMM_RAISE_ERROR(PdfErrorCode::InvalidEnumValue);
    }
}

bool mm::IsStandard14Font(const string_view& fontName, bool useAltNames, PdfStandard14FontType& stdFont)
{
    if (fontName == FONT_TIMES_ROMAN_STD)
    {
        stdFont = PdfStandard14FontType::TimesRoman;
        return true;
    }
    else if (fontName == FONT_TIMES_ITALIC_STD)
    {
        stdFont = PdfStandard14FontType::TimesItalic;
        return true;
    }
    else if (fontName == FONT_TIMES_BOLD_STD)
    {
        stdFont = PdfStandard14FontType::TimesBold;
        return true;
    }
    else if (fontName == FONT_TIMES_BOLD_ITALIC_STD)
    {
        stdFont = PdfStandard14FontType::TimesBoldItalic;
        return true;
    }
    else if (fontName == FONT_HELVETICA_STD)
    {
        stdFont = PdfStandard14FontType::Helvetica;
        return true;
    }
    else if (fontName == FONT_HELVETICA_OBLIQUE_STD)
    {
        stdFont = PdfStandard14FontType::HelveticaOblique;
        return true;
    }
    else if (fontName == FONT_HELVETICA_BOLD_STD)
    {
        stdFont = PdfStandard14FontType::HelveticaBold;
        return true;
    }
    else if (fontName == FONT_HELVETICA_BOLD_OBLIQUE_STD)
    {
        stdFont = PdfStandard14FontType::HelveticaBoldOblique;
        return true;
    }
    else if (fontName == FONT_COURIER_STD)
    {
        stdFont = PdfStandard14FontType::Courier;
        return true;
    }
    else if (fontName == FONT_COURIER_OBLIQUE_STD)
    {
        stdFont = PdfStandard14FontType::CourierOblique;
        return true;
    }
    else if (fontName == FONT_COURIER_BOLD_STD)
    {
        stdFont = PdfStandard14FontType::CourierBold;
        return true;
    }
    else if (fontName == FONT_COURIER_BOLD_OBLIQUE_STD)
    {
        stdFont = PdfStandard14FontType::CourierBoldOblique;
        return true;
    }
    else if (fontName == FONT_SYMBOL_STD)
    {
        stdFont = PdfStandard14FontType::Symbol;
        return true;
    }
    else if (fontName == FONT_ZAPF_DINGBATS_STD)
    {
        stdFont = PdfStandard14FontType::ZapfDingbats;
        return true;
    }

    if (useAltNames)
    {
        if (fontName == FONT_TIMES_ROMAN_ALT)
        {
            stdFont = PdfStandard14FontType::TimesRoman;
            return true;
        }
        else if (fontName == FONT_TIMES_ITALIC_ALT)
        {
            stdFont = PdfStandard14FontType::TimesItalic;
            return true;
        }
        else if (fontName == FONT_TIMES_BOLD_ALT)
        {
            stdFont = PdfStandard14FontType::TimesBold;
            return true;
        }
        else if (fontName == FONT_TIMES_BOLD_ITALIC_ALT)
        {
            stdFont = PdfStandard14FontType::TimesBoldItalic;
            return true;
        }
        else if (fontName == FONT_HELVETICA_ALT)
        {
            stdFont = PdfStandard14FontType::Helvetica;
            return true;
        }
        else if (fontName == FONT_HELVETICA_OBLIQUE_ALT)
        {
            stdFont = PdfStandard14FontType::HelveticaOblique;
            return true;
        }
        else if (fontName == FONT_HELVETICA_BOLD_ALT)
        {
            stdFont = PdfStandard14FontType::HelveticaBold;
            return true;
        }
        else if (fontName == FONT_HELVETICA_BOLD_OBLIQUE_ALT)
        {
            stdFont = PdfStandard14FontType::HelveticaBoldOblique;
            return true;
        }
        else if (fontName == FONT_COURIER_ALT)
        {
            stdFont = PdfStandard14FontType::Courier;
            return true;
        }
        else if (fontName == FONT_COURIER_OBLIQUE_ALT)
        {
            stdFont = PdfStandard14FontType::CourierOblique;
            return true;
        }
        else if (fontName == FONT_COURIER_BOLD_ALT)
        {
            stdFont = PdfStandard14FontType::CourierBold;
            return true;
        }
        else if (fontName == FONT_COURIER_BOLD_OBLIQUE_ALT)
        {
            stdFont = PdfStandard14FontType::CourierBoldOblique;
            return true;
        }
    }

    stdFont = PdfStandard14FontType::Unknown;
    return false;
}

const Standard14FontChar* mm::GetStd14FontChars(PdfStandard14FontType stdFont, unsigned& size)
{
    switch (stdFont)
    {
        case PdfStandard14FontType::TimesRoman:
            size = (unsigned short)std::size(CHAR_DATA_TIMES_ROMAN);
            return CHAR_DATA_TIMES_ROMAN;
        case PdfStandard14FontType::TimesItalic:
            size = (unsigned short)std::size(CHAR_DATA_TIMES_ITALIC);
            return CHAR_DATA_TIMES_ITALIC;
        case PdfStandard14FontType::TimesBold:
            size = (unsigned short)std::size(CHAR_DATA_TIMES_BOLD);
            return CHAR_DATA_TIMES_BOLD;
        case PdfStandard14FontType::TimesBoldItalic:
            size = (unsigned short)std::size(CHAR_DATA_TIMES_BOLD_ITALIC);
            return CHAR_DATA_TIMES_BOLD_ITALIC;
        case PdfStandard14FontType::Helvetica:
            size = (unsigned short)std::size(CHAR_DATA_HELVETICA);
            return CHAR_DATA_HELVETICA;
        case PdfStandard14FontType::HelveticaOblique:
            size = (unsigned short)std::size(CHAR_DATA_HELVETICA_OBLIQUE);
            return CHAR_DATA_HELVETICA_OBLIQUE;
        case PdfStandard14FontType::HelveticaBold:
            size = (unsigned short)std::size(CHAR_DATA_HELVETICA_BOLD);
            return CHAR_DATA_HELVETICA_BOLD;
        case PdfStandard14FontType::HelveticaBoldOblique:
            size = (unsigned short)std::size(CHAR_DATA_HELVETICA_BOLD_OBLIQUE);
            return CHAR_DATA_HELVETICA_BOLD_OBLIQUE;
        case PdfStandard14FontType::Courier:
            size = (unsigned short)std::size(CHAR_DATA_COURIER);
            return CHAR_DATA_COURIER;
        case PdfStandard14FontType::CourierOblique:
            size = (unsigned short)std::size(CHAR_DATA_COURIER_OBLIQUE);
            return CHAR_DATA_COURIER_OBLIQUE;
        case PdfStandard14FontType::CourierBold:
            size = (unsigned short)std::size(CHAR_DATA_COURIER_BOLD);
            return CHAR_DATA_COURIER_BOLD;
        case PdfStandard14FontType::CourierBoldOblique:
            size = (unsigned short)std::size(CHAR_DATA_COURIER_BOLD_OBLIQUE);
            return CHAR_DATA_COURIER_BOLD_OBLIQUE;
        case PdfStandard14FontType::Symbol:
            size = (unsigned short)std::size(CHAR_DATA_SYMBOL);
            return CHAR_DATA_SYMBOL;
        case PdfStandard14FontType::ZapfDingbats:
            size = (unsigned short)std::size(CHAR_DATA_ZAPF_DINGBATS);
            return CHAR_DATA_ZAPF_DINGBATS;
        case PdfStandard14FontType::Unknown:
        default:
            PDFMM_RAISE_ERROR(PdfErrorCode::InvalidEnumValue);
    }
}

static const Std14CPToGIDMap& GetTimesRomanMap()
{
    static Std14CPToGIDMapImp Map(PdfStandard14FontType::TimesRoman);
    return Map.Map;
}

static const Std14CPToGIDMap& GetTimesItalicMap()
{
    static Std14CPToGIDMapImp Map(PdfStandard14FontType::TimesItalic);
    return Map.Map;
}

static const Std14CPToGIDMap& GetTimesBoldMap()
{
    static Std14CPToGIDMapImp Map(PdfStandard14FontType::TimesBold);
    return Map.Map;
}

static const Std14CPToGIDMap& GetTimesBoldItalicMap()
{
    static Std14CPToGIDMapImp Map(PdfStandard14FontType::TimesBoldItalic);
    return Map.Map;
}

static const Std14CPToGIDMap& GetHelveticaMap()
{
    static Std14CPToGIDMapImp Map(PdfStandard14FontType::Helvetica);
    return Map.Map;
}

static const Std14CPToGIDMap& GetHelveticaObliqueMap()
{
    static Std14CPToGIDMapImp Map(PdfStandard14FontType::HelveticaOblique);
    return Map.Map;
}

static const Std14CPToGIDMap& GetHelveticaBoldMap()
{
    static Std14CPToGIDMapImp Map(PdfStandard14FontType::HelveticaBold);
    return Map.Map;
}

static const Std14CPToGIDMap& GetHelveticaBoldObliqueMap()
{
    static Std14CPToGIDMapImp Map(PdfStandard14FontType::HelveticaBoldOblique);
    return Map.Map;
}

static const Std14CPToGIDMap& GetCourierMap()
{
    static Std14CPToGIDMapImp Map(PdfStandard14FontType::Courier);
    return Map.Map;
}

static const Std14CPToGIDMap& GetCourierObliqueMap()
{
    static Std14CPToGIDMapImp Map(PdfStandard14FontType::CourierOblique);
    return Map.Map;
}

static const Std14CPToGIDMap& GetCourierBoldMap()
{
    static Std14CPToGIDMapImp Map(PdfStandard14FontType::CourierBold);
    return Map.Map;
}

static const Std14CPToGIDMap& GetCourierBoldObliqueMap()
{
    static Std14CPToGIDMapImp Map(PdfStandard14FontType::CourierBoldOblique);
    return Map.Map;
}

static const Std14CPToGIDMap& GetSymbolMap()
{
    static Std14CPToGIDMapImp Map(PdfStandard14FontType::Symbol);
    return Map.Map;
}

static const Std14CPToGIDMap& GetZapfDingbatsMap()
{
    static Std14CPToGIDMapImp Map(PdfStandard14FontType::ZapfDingbats);
    return Map.Map;
}

const Std14CPToGIDMap& mm::GetStd14CPToGIDMap(PdfStandard14FontType stdFont)
{
    switch (stdFont)
    {
        case PdfStandard14FontType::TimesRoman:
            return GetTimesRomanMap();
        case PdfStandard14FontType::TimesItalic:
            return GetTimesItalicMap();
        case PdfStandard14FontType::TimesBold:
            return GetTimesBoldMap();
        case PdfStandard14FontType::TimesBoldItalic:
            return GetTimesBoldItalicMap();
        case PdfStandard14FontType::Helvetica:
            return GetHelveticaMap();
        case PdfStandard14FontType::HelveticaOblique:
            return GetHelveticaObliqueMap();
        case PdfStandard14FontType::HelveticaBold:
            return GetHelveticaBoldMap();
        case PdfStandard14FontType::HelveticaBoldOblique:
            return GetHelveticaBoldObliqueMap();
        case PdfStandard14FontType::Courier:
            return GetCourierMap();
        case PdfStandard14FontType::CourierOblique:
            return GetCourierObliqueMap();
        case PdfStandard14FontType::CourierBold:
            return GetCourierBoldMap();
        case PdfStandard14FontType::CourierBoldOblique:
            return GetCourierBoldObliqueMap();
        case PdfStandard14FontType::Symbol:
            return GetSymbolMap();
        case PdfStandard14FontType::ZapfDingbats:
            return GetZapfDingbatsMap();
        case PdfStandard14FontType::Unknown:
        default:
            PDFMM_RAISE_ERROR(PdfErrorCode::InvalidEnumValue);
    }
}

string_view mm::GetStandard14FontBaseName(PdfStandard14FontType stdFont)
{
    switch (stdFont)
    {
        case PdfStandard14FontType::TimesRoman:
        case PdfStandard14FontType::TimesItalic:
        case PdfStandard14FontType::TimesBold:
        case PdfStandard14FontType::TimesBoldItalic:
            return TIMES_ROMAN_FAMILY_STD;
        case PdfStandard14FontType::Helvetica:
        case PdfStandard14FontType::HelveticaOblique:
        case PdfStandard14FontType::HelveticaBold:
        case PdfStandard14FontType::HelveticaBoldOblique:
            return TIMES_HELVETICA_FAMILY_STD;
        case PdfStandard14FontType::Courier:
        case PdfStandard14FontType::CourierOblique:
        case PdfStandard14FontType::CourierBold:
        case PdfStandard14FontType::CourierBoldOblique:
            return TIMES_COURIER_FAMILY_STD;
        case PdfStandard14FontType::Symbol:
            return FONT_SYMBOL_STD;
        case PdfStandard14FontType::ZapfDingbats:
            return FONT_ZAPF_DINGBATS_STD;
        case PdfStandard14FontType::Unknown:
        default:
            PDFMM_RAISE_ERROR(PdfErrorCode::InvalidEnumValue);
    }
}

shared_ptr<const PdfFontMetricsStandard14> PdfFontMetricsStandard14::GetInstance(
    PdfStandard14FontType std14Font)
{
    // The following metrics were copied from libharu
    // /StemV, /ItalicAngle, /FontWeight and /Flags values were copied
    // from Acrobat Pro with font embedding tests
    static vector<shared_ptr<PdfFontMetricsStandard14>> PDFMM_BUILTIN_FONTS = {
        shared_ptr<PdfFontMetricsStandard14>(new PdfFontMetricsStandard14(
            PdfStandard14FontType::TimesRoman, {
                CHAR_DATA_TIMES_ROMAN,
                (unsigned)std::size(CHAR_DATA_TIMES_ROMAN),
                PdfFontDescriptorFlags::Symbolic | PdfFontDescriptorFlags::Serif,
                727,
                -273,
                450,
                662,
                0,
                400,
                80,
                -1,
                262,
                -100,
                PdfRect(-168, -218, 1000, 898)
            }
        )),
        shared_ptr<PdfFontMetricsStandard14>(new PdfFontMetricsStandard14(
            PdfStandard14FontType::TimesItalic, {
                CHAR_DATA_TIMES_ITALIC,
                (unsigned)std::size(CHAR_DATA_TIMES_ITALIC),
                PdfFontDescriptorFlags::Symbolic | PdfFontDescriptorFlags::Serif | PdfFontDescriptorFlags::Italic,
                727,
                -273,
                441,
                653,
                -17,
                400,
                72,
                -1,
                262,
                -100,
                PdfRect(-169, -217, 1010, 883)
            }
        )),
        shared_ptr<PdfFontMetricsStandard14>(new PdfFontMetricsStandard14(
            PdfStandard14FontType::TimesBold, {
                CHAR_DATA_TIMES_BOLD,
                (unsigned)std::size(CHAR_DATA_TIMES_BOLD),
                PdfFontDescriptorFlags::Symbolic | PdfFontDescriptorFlags::Serif,
                727,
                -273,
                461,
                676,
                0,
                700,
                136,
                -1,
                262,
                -100,
                PdfRect(-168, -218, 1000, 935)
            }
        )),
        shared_ptr<PdfFontMetricsStandard14>(new PdfFontMetricsStandard14(
            PdfStandard14FontType::TimesBoldItalic, {
                CHAR_DATA_TIMES_BOLD_ITALIC,
                (unsigned)std::size(CHAR_DATA_TIMES_BOLD_ITALIC),
                PdfFontDescriptorFlags::Symbolic | PdfFontDescriptorFlags::Serif | PdfFontDescriptorFlags::Italic,
                727,
                -273,
                462,
                669,
                -17,
                700,
                124,
                -1,
                262,
                -100,
                PdfRect(-200, -218, 996, 921)
            }
        )),
        shared_ptr<PdfFontMetricsStandard14>(new PdfFontMetricsStandard14(
            PdfStandard14FontType::Helvetica, {
                CHAR_DATA_HELVETICA,
                (unsigned)std::size(CHAR_DATA_HELVETICA),
                PdfFontDescriptorFlags::Symbolic,
                750,
                -250,
                523,
                718,
                0,
                400,
                88,
                -1,
                290,
                -100,
                PdfRect(-166, -225, 1000, 931)
            }
        )),
        shared_ptr<PdfFontMetricsStandard14>(new PdfFontMetricsStandard14(
            PdfStandard14FontType::HelveticaOblique, {
                CHAR_DATA_HELVETICA_OBLIQUE,
                (unsigned)std::size(CHAR_DATA_HELVETICA_OBLIQUE),
                PdfFontDescriptorFlags::Symbolic | PdfFontDescriptorFlags::Italic,
                750,
                -250,
                532,
                718,
                -12,
                400,
                92,
                -1,
                290,
                -100,
                PdfRect(-170, -225, 1116, 931)
            }
        )),
        shared_ptr<PdfFontMetricsStandard14>(new PdfFontMetricsStandard14(
            PdfStandard14FontType::HelveticaBold, {
               CHAR_DATA_HELVETICA_BOLD,
                (unsigned)std::size(CHAR_DATA_HELVETICA_BOLD),
                PdfFontDescriptorFlags::Symbolic,
                750,
                -250,
                532,
                718,
                0,
                700,
                136,
                -1,
                290,
                -100,
                PdfRect(-170, -228, 1003, 962)
            }
        )),
        shared_ptr<PdfFontMetricsStandard14>(new PdfFontMetricsStandard14(
            PdfStandard14FontType::HelveticaBoldOblique, {
                CHAR_DATA_HELVETICA_BOLD_OBLIQUE,
                (unsigned)std::size(CHAR_DATA_HELVETICA_BOLD_OBLIQUE),
                PdfFontDescriptorFlags::Symbolic | PdfFontDescriptorFlags::Italic,
                750,
                -250,
                532,
                718,
                -12,
                700,
                140,
                -1,
                290,
                -100,
                PdfRect(-174, -228, 1114, 962)
            }
        )),
        shared_ptr<PdfFontMetricsStandard14>(new PdfFontMetricsStandard14(
            PdfStandard14FontType::Courier, {
                CHAR_DATA_COURIER,
                315,
                PdfFontDescriptorFlags::Symbolic | PdfFontDescriptorFlags::Serif,
                627,
                -373,
                426,
                562,
                0,
                500,
                56,
                -1,
                261,
                -224,
                PdfRect(-23, -250, 715, 805)
            }
        )),
        shared_ptr<PdfFontMetricsStandard14>(new PdfFontMetricsStandard14(
            PdfStandard14FontType::CourierOblique, {
                CHAR_DATA_COURIER_OBLIQUE,
                315,
                PdfFontDescriptorFlags::Symbolic | PdfFontDescriptorFlags::Serif | PdfFontDescriptorFlags::Italic,
                627,
                -373,
                426,
                562,
                -11,
                500,
                56,
                -1,
                261,
                -224,
                PdfRect(-27, -250, 849, 805)
            }
        )),
        shared_ptr<PdfFontMetricsStandard14>(new PdfFontMetricsStandard14(
            PdfStandard14FontType::CourierBold, {
                CHAR_DATA_COURIER_BOLD,
                315,
                PdfFontDescriptorFlags::Symbolic | PdfFontDescriptorFlags::Serif,
                627,
                -373,
                439,
                562,
                0,
                700,
                92,
                -1,
                261,
                -224,
                PdfRect(-113, -250, 749, 801)
            }
        )),
        shared_ptr<PdfFontMetricsStandard14>(new PdfFontMetricsStandard14(
            PdfStandard14FontType::CourierBoldOblique, {
                CHAR_DATA_COURIER_BOLD_OBLIQUE,
                315,
                PdfFontDescriptorFlags::Symbolic | PdfFontDescriptorFlags::Serif | PdfFontDescriptorFlags::Italic,
                627,
                -373,
                439,
                562,
                -11,
                700,
                92,
                -1,
                261,
                -224,
                PdfRect(-57, -250, 869, 801)
            }
        )),
        shared_ptr<PdfFontMetricsStandard14>(new PdfFontMetricsStandard14(
            PdfStandard14FontType::Symbol, {
                CHAR_DATA_SYMBOL,
                (unsigned)std::size(CHAR_DATA_SYMBOL),
                PdfFontDescriptorFlags::Symbolic,
                683,
                -217,
                462,
                669,
                0,
                -1,
                75,
                92,
                341,
                -100,
                PdfRect(-180, -293, 1090, 1010)
            }
        )),
        shared_ptr<PdfFontMetricsStandard14>(new PdfFontMetricsStandard14(
            PdfStandard14FontType::ZapfDingbats, {
                CHAR_DATA_ZAPF_DINGBATS,
                (unsigned)std::size(CHAR_DATA_ZAPF_DINGBATS),
                PdfFontDescriptorFlags::Symbolic,
                683,
                -217,
                462,
                669,
                0,
                -1,
                75,
                50,
                341,
                -100,
                PdfRect(-1, -143, 981, 820)
            }
        ))
    };

    switch (std14Font)
    {
        case PdfStandard14FontType::TimesRoman:
            return PDFMM_BUILTIN_FONTS[0];
        case PdfStandard14FontType::TimesItalic:
            return PDFMM_BUILTIN_FONTS[1];
        case PdfStandard14FontType::TimesBold:
            return PDFMM_BUILTIN_FONTS[2];
        case PdfStandard14FontType::TimesBoldItalic:
            return PDFMM_BUILTIN_FONTS[3];
        case PdfStandard14FontType::Helvetica:
            return PDFMM_BUILTIN_FONTS[4];
        case PdfStandard14FontType::HelveticaOblique:
            return PDFMM_BUILTIN_FONTS[5];
        case PdfStandard14FontType::HelveticaBold:
            return PDFMM_BUILTIN_FONTS[6];
        case PdfStandard14FontType::HelveticaBoldOblique:
            return PDFMM_BUILTIN_FONTS[7];
        case PdfStandard14FontType::Courier:
            return PDFMM_BUILTIN_FONTS[8];
        case PdfStandard14FontType::CourierOblique:
            return PDFMM_BUILTIN_FONTS[9];
        case PdfStandard14FontType::CourierBold:
            return PDFMM_BUILTIN_FONTS[10];
        case PdfStandard14FontType::CourierBoldOblique:
            return PDFMM_BUILTIN_FONTS[11];
        case PdfStandard14FontType::Symbol:
            return PDFMM_BUILTIN_FONTS[12];
        case PdfStandard14FontType::ZapfDingbats:
            return PDFMM_BUILTIN_FONTS[13];
        case PdfStandard14FontType::Unknown:
        default:
            PDFMM_RAISE_ERROR_INFO(PdfErrorCode::InvalidFontFile, "Invalid Standard14 font type");
    }
}
